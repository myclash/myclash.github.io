<!DOCTYPE html>
<html class="no-js" lang="zh-CN">

<head>
        <link rel="canonical" href="https://myclash.github.io/news/article-24243.htm" />
    <meta charset="utf-8" />
    <meta http-equiv="x-ua-compatible" content="ie=edge" />
    <title>Redis如何无锁应对并发访问及如何实现分布式锁</title>
        <meta name="description" content="Redis无锁应对并发访问 原子操作是一种提供无锁并发访问控制的方法。原子操作是指执行过程保持原子性的操作，而且原子操作执行时并不需要再加锁，实现了无锁操作。 并发访问控制对应的操作主要是数据修改操作" />
        <link rel="icon" href="/assets/website/img/myclash/favicon.ico" type="image/x-icon"/>
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <!-- Place favicon.ico in the root directory -->
    <!-- ========================= CSS here ========================= -->
    <link rel="stylesheet" href="/assets/website/css/myclash/bootstrap-5.0.0-alpha-2.min.css" />
    <link rel="stylesheet" href="/assets/website/css/myclash/LineIcons.2.0.css" />
    <link rel="stylesheet" href="/assets/website/css/myclash/animate.css" />
    <link rel="stylesheet" href="/assets/website/css/myclash/tiny-slider.css" />
    <link rel="stylesheet" href="/assets/website/css/myclash/glightbox.min.css" />
    <link rel="stylesheet" href="/assets/website/css/myclash/lindy-uikit.css" />
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-JV5DZ5QQPV"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-JV5DZ5QQPV');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
    <!--[if lte IE 9]>
      <p class="browserupgrade">
        You are using an <strong>outdated</strong> browser. Please
        <a href="https://browsehappy.com/">upgrade your browser</a> to improve
        your experience and security.
      </p>
    <![endif]-->
    <!-- ========================= preloader start ========================= -->
    <div class="preloader">
        <div class="loader">
            <div class="spinner">
                <div class="spinner-container">
                    <div class="spinner-rotator">
                        <div class="spinner-left">
                            <div class="spinner-circle"></div>
                        </div>
                        <div class="spinner-right">
                            <div class="spinner-circle"></div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <!-- ========================= preloader end ========================= -->
    <!-- ========================= hero-section-wrapper-2 start ========================= -->
    <section id="home" class="hero-section-wrapper-2 list">
                <!-- ========================= header-2 start ========================= -->
        <header class="header header-2">
            <div class="navbar-area">
                <div class="container">
                    <div class="row align-items-center">
                        <div class="col-lg-12">
                            <nav class="navbar navbar-expand-lg">
                                <a class="navbar-brand" href="/">
                                    My Clash
                                </a>
                                <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarSupportedContent2" aria-controls="navbarSupportedContent2" aria-expanded="false" aria-label="Toggle navigation">
                                    <span class="toggler-icon"></span>
                                    <span class="toggler-icon"></span>
                                    <span class="toggler-icon"></span>
                                </button>
                                <div class="collapse navbar-collapse sub-menu-bar" id="navbarSupportedContent2">
                                    <ul id="nav2" class="navbar-nav ml-auto">
                                                                                <li class="nav-item">
                                            <a href="/">首页</a>
                                        </li>
                                                                                <li class="nav-item">
                                            <a href="/free-nodes/">免费节点</a>
                                        </li>
                                                                                <li class="nav-item">
                                            <a href="/paid-subscribe/">推荐机场</a>
                                        </li>
                                                                                <li class="nav-item">
                                            <a href="/news/">新闻资讯</a>
                                        </li>
                                                                                <li class="nav-item">
                                            <a href="#">关于</a>
                                        </li>
                                        <li class="nav-item">
                                            <a href="#">联系</a>
                                        </li>
                                    </ul>
                                </div>
                                <!-- navbar collapse -->
                            </nav>
                            <!-- navbar -->
                        </div>
                    </div>
                    <!-- row -->
                </div>
                <!-- container -->
            </div>
            <!-- navbar area -->
        </header>
        <!-- ========================= header-2 end ========================= -->
        <!-- ========================= hero-2 start ========================= -->
        <div class="hero-section hero-style-2">
            <div class="container">
                <div class="row align-items-end">
                    <div class="col-lg-6">
                        <div class="hero-content-wrapper">
                            <h1 class="mb-30 wow fadeInUp" data-wow-delay=".4s">Redis如何无锁应对并发访问及如何实现分布式锁</h1>
                            <p class="mb-50 wow fadeInUp" data-wow-delay=".6s">
                                <a href="/">首页</a> / <a href="/news/">新闻资讯</a> / <span>正文</span>
                            </p>
                        </div>
                    </div>
                    <div class="col-lg-6">
                        <div class="hero-image">
                            <img href="/assets/website/img/myclash/hero/hero-2/hero-img.svg" alt="" class="wow fadeInRight" data-wow-delay=".2s">
                            <img href="/assets/website/img/myclash/hero/hero-2/paattern.svg" alt="" class="shape shape-1">
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <!-- ========================= hero-2 end ========================= -->
    </section>
    <!-- ========================= hero-section-wrapper-2 end ========================= -->
    <!-- ========================= about style-3 start ========================= -->
    <section id="about" class="about-section about-style-3">
        <div class="container">
            <div class="row">
                <div class="col-md-9">
                                      				  				  				<div id="content_views" class="markdown_views prism-atom-one-dark"> <h2> <a id="Redis_0" rel="nofollow"></a>Redis无锁应对并发访问</h2> <p><mark>原子操作是一种提供无锁并发访问控制的方法</mark>。原子操作是指执行过程保持原子性的操作，而且原子操作执行时并不需要再加锁，实现了无锁操作。</p> <p>并发访问控制对应的操作主要是<mark>数据修改操作</mark>。当客户端需要修改数据时，基本流程分成两步：</p> <ul> <li> <p>客户端先把数据读取到本地，在本地进行修改；</p> </li> <li> <p>客户端修改完数据后，再写回 Redis。</p> </li> </ul> <p>我们把这个流程叫做“读取 - 修改 - 写回”操作（Read-Modify-Write，简称为 RMW 操作）。当有多个客户端对同一份数据执行 RMW 操作的话，我们就需要让 RMW 操作涉及的代码以原子性方式执行。<mark>访问同一份数据的 RMW 操作代码，就叫做临界区代码</mark>。</p> <p>为了实现并发控制要求的临界区代码互斥执行，Redis 的原子操作采用了两种方法：</p> <ul> <li> <p>把多个操作在 Redis 中实现成一个操作，也就是<mark>单命令操作</mark>；</p> </li> <li> <p>把多个操作写到一个<mark>Lua 脚本</mark>中，以原子性方式执行单个 Lua 脚本。</p> </li> </ul> <p>如果我们执行的 RMW 操作是对数据进行增减值的话，Redis 提供的<mark>原子操作 INCR 和 DECR</mark> 可以直接帮助我们进行并发控制。</p> <p>但是，如果我们要执行的操作不是简单地增减数据，而是有更加复杂的判断逻辑或者是其他操作，那么，Redis 的单命令操作已经无法保证多个操作的互斥执行了。所以，这个时候，我们需要使用第二个方法，也就是 <mark>Lua 脚本</mark>。</p> <p>Redis 会把整个 Lua 脚本作为一个整体执行，在执行的过程中不会被其他命令打断，从而保证了 Lua 脚本中操作的原子性。如果我们有多个操作要执行，但是又无法用 INCR/DECR 这种命令操作来实现，就可以把这些要执行的操作编写到一个 Lua 脚本中。然后，我们可以使用 Redis 的 EVAL 命令来执行脚本。这样一来，这些操作在执行时就具有了互斥性。</p> <p>如果把很多操作都放在 Lua 脚本中原子执行，会导致 Redis 执行脚本的时间增加，同样也会降低 Redis 的并发性能。所以：在编写 Lua 脚本时，<mark>避免把不需要做并发控制的操作写入脚本中</mark>。</p> <h2> <a id="Redis_25" rel="nofollow"></a>使用Redis实现分布式锁</h2> <p>在分布式系统中，当有多个客户端需要争抢锁时，我们必须要保证，<mark>这把锁不能是某个客户端本地的锁</mark>。否则的话，其它客户端是无法访问这把锁的，当然也就不能获取这把锁了。</p> <p>所以当有多个客户端需要获取锁时，我们需要<mark>分布式锁</mark>。此时，锁是保存在一个共享存储系统中的，可以被多个客户端共享访问和获取。</p> <p>分布式锁和单机上的锁一样同样可以<mark>用一个变量来实现</mark>。加锁时同样需要判断锁变量的值，根据锁变量值来判断能否加锁成功；释放锁时需要把锁变量值设置为 0，表明客户端不再持有锁。</p> <p>在分布式场景下，<mark>锁变量需要由一个共享存储系统来维护</mark>，只有这样，多个客户端才可以通过访问共享存储系统来访问锁变量。相应的，<mark>加锁和释放锁的操作就变成了读取、判断和设置共享存储系统中的锁变量值</mark>。</p> <p>这样一来，我们就可以得出实现分布式锁的两个要求：</p> <ul> <li> <p>要求一：分布式锁的加锁和释放锁的过程，涉及多个操作。所以，在实现分布式锁时，我们需要保证这些<mark>锁操作的原子性</mark>；</p> </li> <li> <p>要求二：共享存储系统保存了锁变量，如果共享存储系统发生故障或宕机，那么客户端也就无法进行锁操作了。在实现分布式锁时，我们需要考虑保证共享存储系统的可靠性，进而<mark>保证锁的可靠性</mark>。</p> </li> </ul> <h3> <a id="_Redis__40" rel="nofollow"></a>基于单个 Redis 节点实现分布式锁</h3> <p>作为分布式锁实现过程中的共享存储系统，Redis 可以<mark>使用键值对来保存锁变量</mark>，再接收和处理不同客户端发送的加锁和释放锁的操作请求。</p> <p>我们要赋予锁变量一个变量名，把这个变量名作为键值对的键，而锁变量的值，则是键值对的值，这样一来，Redis 就能保存锁变量了，客户端也就可以通过 Redis 的命令操作来实现锁操作。</p> <p><img decoding="async" src="http://img.555519.xyz/uploads/20221230/fff658a7e63582818a9d19491e4a6ac1.jpg" alt="Redis如何无锁应对并发访问及如何实现分布式锁"></p> <p>因为加锁包含了三个操作（读取锁变量、判断锁变量值以及把锁变量值设置为 1），而这三个操作在执行时需要保证原子性。所以<mark>Redis 可以用单命令操作实现加锁操作</mark>。</p> <p>首先是<mark>SETNX 命令，它用于设置键值对的值</mark>。具体来说，就是这个命令在执行时会判断键值对是否存在，如果不存在，就设置键值对的值，如果存在，就不做任何设置。</p> <p>对于释放锁操作来说，我们可以在执行完业务逻辑后，<mark>使用 DEL 命令删除锁变量</mark>。</p> <p>总结来说，我们就可以用 SETNX 和 DEL 命令组合来实现加锁和释放锁操作：</p> <pre><code>// 加锁 SETNX lock_key 1  // 业务逻辑 DO THINGS  // 释放锁 DEL lock_key </code></pre> <p>不过，使用 SETNX 和 DEL 命令组合实现分布锁，存在两个潜在的风险：</p> <ol> <li> <p>第一个风险是，假如某个客户端在执行了 SETNX 命令、加锁之后，紧接着却在操作共享数据时发生了异常，结果一直没有执行最后的 DEL 命令释放锁。因此，锁就一直被这个客户端持有，其它客户端无法拿到锁，也无法访问共享数据和执行后续操作，这会给业务应用带来影响。</p> <p>解决方案：<mark>给锁变量设置一个过期时间</mark>。这样一来，即使持有锁的客户端发生了异常，无法主动地释放锁，Redis 也会根据锁变量的过期时间，在锁变量过期后，把它删除。其它客户端在锁变量过期后，就可以重新请求加锁，这就不会出现无法加锁的问题了。</p> </li> <li> <p>我们再来看第二个风险。如果客户端 A 执行了 SETNX 命令加锁后，假设客户端 B 执行了 DEL 命令释放锁，此时，客户端 A 的锁就被误释放了。如果客户端 C 正好也在申请加锁，就可以成功获得锁，进而开始操作共享数据。</p> <p>解决方案：<mark>区分来自不同客户端的锁操作</mark>。如果锁变量值设置为 1 或 0用来表示是否加锁成功。1 和 0 只有两种状态，无法表示究竟是哪个客户端进行的锁操作。所以，我们在加锁操作时，可以让每个客户端给锁变量设置一个唯一值，这里的唯一值就可以用来标识当前操作的客户端。在释放锁操作时，客户端需要判断，当前锁变量的值是否和自己的唯一标识相等，只有在相等的情况下，才能释放锁。这样一来，就不会出现误释放锁的问题了。</p> </li> </ol> <p><mark>Redis中如何用命令具体实现呢？</mark></p> <p>为了能达到和 SETNX 命令一样的效果，Redis 给 SET 命令提供了选项 NX，用来实现“不存在即设置”。如果使用了 NX 选项，SET 命令只有在键值对不存在时，才会进行设置，否则不做赋值操作。此外，SET 命令在执行时还可以带上 EX 或 PX 选项，用来设置键值对的过期时间。<strong>key 的存活时间由 seconds 或者 milliseconds 选项值来决定</strong>。</p> <p>命令格式：SET key value [EX seconds | PX milliseconds] [NX]</p> <p>具体代码：</p> <pre><code>// 加锁, unique_value作为客户端唯一性的标识 SET lock_key unique_value NX PX 10000  // 业务逻辑 DO THINGS  //释放锁 比较unique_value是否相等，避免误释放 if redis.call("get",KEYS[1]) == ARGV[1] then      return redis.call("del",KEYS[1])  else      return 0  end 这是使用 Lua 脚本（unlock.script）实现的释放锁操作的伪代码，其中，KEYS[1]表示 lock_key，ARGV[1]是当前客户端的唯一标识，这两个值都是我们在执行 Lua 脚本时作为参数传入的。  最后，我们执行下面的命令，就可以完成锁释放操作了。 redis-cli  --eval  unlock.script lock_key , unique_value  </code></pre> <h3> <a id="_Redis__108" rel="nofollow"></a>基于多个 Redis 节点实现高可靠的分布式锁</h3> <p>如果只用了一个 Redis 实例来保存锁变量，如果这个 Redis 实例发生故障宕机了，那么锁变量就没有了。此时，客户端也无法进行锁操作了，这就会影响到业务的正常执行。所以，我们在实现分布式锁时，还需要保证<mark>锁的可靠性</mark>。</p> <p>为了避免 Redis 实例故障而导致的锁无法工作的问题，Redis 的开发者 Antirez 提出了<mark>分布式锁算法 Redlock</mark>。</p> <p>Redlock 算法的基本思路，是让客户端和多个独立的 Redis 实例依次请求加锁，如果客户端能够和半数以上的实例成功地完成加锁操作，那么我们就认为，客户端成功地获得分布式锁了，否则加锁失败。这样一来，即使有单个 Redis 实例发生故障，因为锁变量在其它实例上也有保存，所以，客户端仍然可以正常地进行锁操作，锁变量并不会丢失。</p> <p>Redlock 算法的执行步骤：</p> <ol> <li> <p>第一步是，<mark>客户端获取当前时间</mark>。</p> </li> <li> <p>第二步是，<mark>客户端按顺序依次向 N 个 Redis 实例执行加锁操作</mark>。</p> <p>这里的加锁操作和在单实例上执行的加锁操作一样，使用 SET 命令，带上 NX，EX/PX 选项，以及带上客户端的唯一标识。当然，如果某个 Redis 实例发生故障了，为了保证在这种情况下，Redlock 算法能够继续运行，我们需要给加锁操作设置一个超时时间。</p> <p>如果客户端在和一个 Redis 实例请求加锁时，一直到超时都没有成功，那么此时，客户端会和下一个 Redis 实例继续请求加锁。加锁操作的超时时间需要远远地小于锁的有效时间，一般也就是设置为几十毫秒。</p> </li> <li> <p>第三步是，一旦客户端完成了和所有 Redis 实例的加锁操作，客户端就要<mark>计算整个加锁过程的总耗时</mark>。</p> <p>客户端只有在满足下面的这两个条件时，才能认为是加锁成功。</p> <ul> <li> <p>条件一：客户端从超过半数（大于等于 N/2+1）的 Redis 实例上成功获取到了锁；</p> </li> <li> <p>条件二：客户端获取锁的总耗时没有超过锁的有效时间。</p> </li> </ul> <p>在满足了这两个条件后，我们需要重新计算这把锁的有效时间，计算的结果是锁的最初有效时间减去客户端为获取锁的总耗时。如果锁的有效时间已经来不及完成共享数据的操作了，我们可以释放锁，以免出现还没完成数据操作，锁就过期了的情况。</p> <p>当然，如果客户端在和所有实例执行完加锁操作后，没能同时满足这两个条件，那么，客户端向所有 Redis 节点发起释放锁的操作。</p> <p>在 Redlock 算法中，释放锁的操作和在单实例上释放锁的操作一样，只要执行释放锁的 Lua 脚本就可以了。这样一来，只要 N 个 Redis 实例中的半数以上实例能正常工作，就能保证分布式锁的正常工作了。</p> </li> </ol> </div> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-24019.htm">叫猫过来的手势（叫猫过来的手势 视频）</a></p>
                                        <p>下一个：<a href="/news/article-24244.htm">docker故障大全</a></p>
                                    </div>
                                </div>
                <div class="col-md-3">
                    <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/free-nodes/2024-10-23-free-v2ray-subscribe.htm" title="「10月23日」最高速度21M/S，2024年Clash/Shadowrocket/V2ray/SSR每天更新免费节点订阅链接">「10月23日」最高速度21M/S，2024年Clash/Shadowrocket/V2ray/SSR每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-10-10-free-ssr-node.htm" title="「10月10日」最高速度22.4M/S，2024年Clash/Shadowrocket/SSR/V2ray每天更新免费节点订阅链接">「10月10日」最高速度22.4M/S，2024年Clash/Shadowrocket/SSR/V2ray每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/news/article-22644.htm" title="专门卖宠物用品的app有哪些（卖宠物用品在哪个平台好卖）">专门卖宠物用品的app有哪些（卖宠物用品在哪个平台好卖）</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-11-8-free-subscribe-node.htm" title="「11月8日」最高速度22.7M/S，2024年V2ray/SSR/Clash/Shadowrocket每天更新免费节点订阅链接">「11月8日」最高速度22.7M/S，2024年V2ray/SSR/Clash/Shadowrocket每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-9-29-clash-windows.htm" title="「9月29日」最高速度20.3M/S，2024年V2ray/Shadowrocket/SSR/Clash每天更新免费节点订阅链接">「9月29日」最高速度20.3M/S，2024年V2ray/Shadowrocket/SSR/Clash每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-10-28-free-subscribe-node.htm" title="「10月28日」最高速度22.5M/S，2024年Clash/Shadowrocket/SSR/V2ray每天更新免费节点订阅链接">「10月28日」最高速度22.5M/S，2024年Clash/Shadowrocket/SSR/V2ray每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-9-16-free-v2ray.htm" title="「9月16日」最高速度20.1M/S，2024年Shadowrocket/V2ray/Clash/SSR每天更新免费节点订阅链接">「9月16日」最高速度20.1M/S，2024年Shadowrocket/V2ray/Clash/SSR每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/news/article-19891.htm" title="DeferredResult异步处理spring mvc Demo">DeferredResult异步处理spring mvc Demo</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-10-25-today-clash-node.htm" title="「10月25日」最高速度22.1M/S，2024年SSR/Clash/Shadowrocket/V2ray每天更新免费节点订阅链接">「10月25日」最高速度22.1M/S，2024年SSR/Clash/Shadowrocket/V2ray每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-8-9-free-high-speed-nodes.htm" title="「8月9日」最高速度22.5M/S，2024年SSR/Clash/Shadowrocket/V2ray每天更新免费节点订阅链接">「8月9日」最高速度22.5M/S，2024年SSR/Clash/Shadowrocket/V2ray每天更新免费节点订阅链接</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">36</span> <a href="/date/2024-12/" title="2024-12 归档">2024-12</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">34</span> <a href="/date/2024-11/" title="2024-11 归档">2024-11</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">31</span> <a href="/date/2024-10/" title="2024-10 归档">2024-10</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">30</span> <a href="/date/2024-09/" title="2024-09 归档">2024-09</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">31</span> <a href="/date/2024-08/" title="2024-08 归档">2024-08</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">22</span> <a href="/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                    </ul>
    </div>
</div>

                </div>
            </div>
        </div>
    </section>
    <!-- ========================= about style-3 end ========================= -->
        <footer class="footer footer-style-1">
        <div class="container">
            <div class="copyright-wrapper wow fadeInUp" data-wow-delay=".2s">
                <p>MyClash官网每日更新站 版权所有 Powered by WordPress</p>
            </div>
        </div>
    </footer>
    <!-- ========================= footer style-1 end ========================= -->
    <!-- ========================= scroll-top start ========================= -->
    <a href="#" class="scroll-top"> <i class="lni lni-chevron-up"></i> </a>
    <!-- ========================= scroll-top end ========================= -->
    <!-- ========================= JS here ========================= -->
    <script src="/assets/website/js/frontend/myclash/jquery-3.4.1.min.js"></script>
    <script src="/assets/website/js/frontend/myclash/bootstrap.5.0.0.alpha-2-min.js"></script>
    <script src="/assets/website/js/frontend/myclash/contact-form.js"></script>
    <script src="/assets/website/js/frontend/myclash/tiny-slider.js"></script>
    <script src="/assets/website/js/frontend/myclash/glightbox.min.js"></script>
    <script src="/assets/website/js/frontend/myclash/imagesloaded.min.js"></script>
    <script src="/assets/website/js/frontend/myclash/isotope.min.js"></script>
    <script src="/assets/website/js/frontend/myclash/count-up.min.js"></script>
    <script src="/assets/website/js/frontend/myclash/wow.min.js"></script>
    <script src="/assets/website/js/frontend/myclash/main.js"></script>
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script><script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>