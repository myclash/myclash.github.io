<!DOCTYPE html>
<html class="no-js" lang="zh-CN">

<head>
        <link rel="canonical" href="https://myclash.github.io/news/article-34365.htm" />
    <meta charset="utf-8" />
    <meta http-equiv="x-ua-compatible" content="ie=edge" />
    <title>Spring Cloud Gateway概念与配置</title>
        <meta name="description" content="文章目录  Spring Cloud Gateway 概述及工作原理   路由（Route） 断言（Predicate） 过滤器（Filter）   Spring Cloud Gateway 工程  " />
        <link rel="icon" href="/assets/website/img/myclash/favicon.ico" type="image/x-icon"/>
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <!-- Place favicon.ico in the root directory -->
    <!-- ========================= CSS here ========================= -->
    <link rel="stylesheet" href="/assets/website/css/myclash/bootstrap-5.0.0-alpha-2.min.css" />
    <link rel="stylesheet" href="/assets/website/css/myclash/LineIcons.2.0.css" />
    <link rel="stylesheet" href="/assets/website/css/myclash/animate.css" />
    <link rel="stylesheet" href="/assets/website/css/myclash/tiny-slider.css" />
    <link rel="stylesheet" href="/assets/website/css/myclash/glightbox.min.css" />
    <link rel="stylesheet" href="/assets/website/css/myclash/lindy-uikit.css" />
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-JV5DZ5QQPV"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-JV5DZ5QQPV');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
    <!--[if lte IE 9]>
      <p class="browserupgrade">
        You are using an <strong>outdated</strong> browser. Please
        <a href="https://browsehappy.com/">upgrade your browser</a> to improve
        your experience and security.
      </p>
    <![endif]-->
    <!-- ========================= preloader start ========================= -->
    <div class="preloader">
        <div class="loader">
            <div class="spinner">
                <div class="spinner-container">
                    <div class="spinner-rotator">
                        <div class="spinner-left">
                            <div class="spinner-circle"></div>
                        </div>
                        <div class="spinner-right">
                            <div class="spinner-circle"></div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <!-- ========================= preloader end ========================= -->
    <!-- ========================= hero-section-wrapper-2 start ========================= -->
    <section id="home" class="hero-section-wrapper-2 list">
                <!-- ========================= header-2 start ========================= -->
        <header class="header header-2">
            <div class="navbar-area">
                <div class="container">
                    <div class="row align-items-center">
                        <div class="col-lg-12">
                            <nav class="navbar navbar-expand-lg">
                                <a class="navbar-brand" href="/">
                                    My Clash
                                </a>
                                <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarSupportedContent2" aria-controls="navbarSupportedContent2" aria-expanded="false" aria-label="Toggle navigation">
                                    <span class="toggler-icon"></span>
                                    <span class="toggler-icon"></span>
                                    <span class="toggler-icon"></span>
                                </button>
                                <div class="collapse navbar-collapse sub-menu-bar" id="navbarSupportedContent2">
                                    <ul id="nav2" class="navbar-nav ml-auto">
                                                                                <li class="nav-item">
                                            <a href="/">首页</a>
                                        </li>
                                                                                <li class="nav-item">
                                            <a href="/free-nodes/">免费节点</a>
                                        </li>
                                                                                <li class="nav-item">
                                            <a href="/paid-subscribe/">推荐机场</a>
                                        </li>
                                                                                <li class="nav-item">
                                            <a href="/news/">新闻资讯</a>
                                        </li>
                                                                                <li class="nav-item">
                                            <a href="#">关于</a>
                                        </li>
                                        <li class="nav-item">
                                            <a href="#">联系</a>
                                        </li>
                                    </ul>
                                </div>
                                <!-- navbar collapse -->
                            </nav>
                            <!-- navbar -->
                        </div>
                    </div>
                    <!-- row -->
                </div>
                <!-- container -->
            </div>
            <!-- navbar area -->
        </header>
        <!-- ========================= header-2 end ========================= -->
        <!-- ========================= hero-2 start ========================= -->
        <div class="hero-section hero-style-2">
            <div class="container">
                <div class="row align-items-end">
                    <div class="col-lg-6">
                        <div class="hero-content-wrapper">
                            <h1 class="mb-30 wow fadeInUp" data-wow-delay=".4s">Spring Cloud Gateway概念与配置</h1>
                            <p class="mb-50 wow fadeInUp" data-wow-delay=".6s">
                                <a href="/">首页</a> / <a href="/news/">新闻资讯</a> / <span>正文</span>
                            </p>
                        </div>
                    </div>
                    <div class="col-lg-6">
                        <div class="hero-image">
                            <img href="/assets/website/img/myclash/hero/hero-2/hero-img.svg" alt="" class="wow fadeInRight" data-wow-delay=".2s">
                            <img href="/assets/website/img/myclash/hero/hero-2/paattern.svg" alt="" class="shape shape-1">
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <!-- ========================= hero-2 end ========================= -->
    </section>
    <!-- ========================= hero-section-wrapper-2 end ========================= -->
    <!-- ========================= about style-3 start ========================= -->
    <section id="about" class="about-section about-style-3">
        <div class="container">
            <div class="row">
                <div class="col-md-9">
                                    <input type="hidden" id="share-website-info" data-name="" data-url="">
                  				  				  				<div id="content_views" class="markdown_views prism-atom-one-dark"> <div class="toc"> <h3>文章目录</h3> <ul> <li><a href="#Spring_Cloud_Gateway__5" rel="nofollow">Spring Cloud Gateway 概述及工作原理</a></li> <li> <ul> <li><a href="#Route_11" rel="nofollow">路由（Route）</a></li> <li><a href="#Predicate_13" rel="nofollow">断言（Predicate）</a></li> <li><a href="#Filter_15" rel="nofollow">过滤器（Filter）</a></li> </ul> </li> <li><a href="#Spring_Cloud_Gateway__21" rel="nofollow">Spring Cloud Gateway 工程</a></li> <li> <ul> <li><a href="#POM_22" rel="nofollow">引入POM</a></li> <li><a href="#_38" rel="nofollow">主程序代码</a></li> <li><a href="#_48" rel="nofollow">代码创建路由</a></li> <li><a href="#_65" rel="nofollow">配置路由</a></li> <li><a href="#_101" rel="nofollow">全局过滤器</a></li> </ul> </li> <li><a href="#Predicate_123" rel="nofollow">断言（Predicate）</a></li> <li> <ul> <li><a href="#1_After_124" rel="nofollow">1. After（时间之后）</a></li> <li><a href="#2_Before_129" rel="nofollow">2. Before（时间之前）</a></li> <li><a href="#3_Between_135" rel="nofollow">3. Between（时间之间）</a></li> <li><a href="#4_CookieCookie_141" rel="nofollow">4. Cookie（Cookie中字段匹配）</a></li> <li><a href="#5_HeaderHeader_147" rel="nofollow">5. Header（Header中字段匹配）</a></li> <li><a href="#6_HostHost_153" rel="nofollow">6. Host（Host匹配）</a></li> <li><a href="#7_MethodMethod_159" rel="nofollow">7. Method（Method请求方法匹配）</a></li> <li><a href="#8_PathPath_166" rel="nofollow">8. Path（Path请求路径匹配）</a></li> <li><a href="#9_QueryQuery_173" rel="nofollow">9. Query（Query查询参数匹配）</a></li> <li><a href="#10_RemoteAddrIP_180" rel="nofollow">10. RemoteAddr（请求IP匹配）</a></li> <li><a href="#11_Weight_187" rel="nofollow">11. Weight（权重）</a></li> </ul> </li> <li><a href="#GatewayFilter_194" rel="nofollow">GatewayFilter(过滤器)</a></li> <li> <ul> <li><a href="#1_AddRequestHeader_195" rel="nofollow">1. AddRequestHeader（请求头添加参数）</a></li> <li><a href="#2_AddRequestParameterQuery_202" rel="nofollow">2. AddRequestParameter（Query）</a></li> <li><a href="#3_AddResponseHeader_209" rel="nofollow">3. AddResponseHeader（响应头添加参数）</a></li> <li><a href="#4_DedupeResponseHeader_216" rel="nofollow">4. DedupeResponseHeader（响应头重复数据消除）</a></li> <li><a href="#5_Hystrix_230" rel="nofollow">5. Hystrix（熔断）</a></li> <li><a href="#6_RequestRateLimiter_248" rel="nofollow">6. RequestRateLimiter（请求限速）</a></li> <li><a href="#7_RedirectTo_274" rel="nofollow">7. RedirectTo（重定向）</a></li> <li><a href="#8_RewritePath_281" rel="nofollow">8. RewritePath（重写路径）</a></li> <li><a href="#9_CircuitBreaker_289" rel="nofollow">9. CircuitBreaker（断路器）</a></li> <li><a href="#10_FallbackHeaders_316" rel="nofollow">10. FallbackHeaders（回调头添加信息）</a></li> <li><a href="#11_MapRequestHeader_348" rel="nofollow">11. MapRequestHeader（请求头映射）</a></li> <li><a href="#12_PrefixPath_354" rel="nofollow">12. PrefixPath（路径前缀）</a></li> <li><a href="#13_PreserveHostHeader_360" rel="nofollow">13. PreserveHostHeader（保留主机标头）</a></li> <li><a href="#14_SetHostHeader_366" rel="nofollow">14. SetHostHeader（设置主机头）</a></li> <li><a href="#15_RemoveRequestHeaderRequestHeader_373" rel="nofollow">15. RemoveRequestHeader（删除RequestHeader信息）</a></li> <li><a href="#16_RemoveRequestParameter_381" rel="nofollow">16. RemoveRequestParameter（删除请求参数）</a></li> <li><a href="#17_RemoveResponseHeaderResponseHeader_389" rel="nofollow">17. RemoveResponseHeader（删除ResponseHeader参数）</a></li> <li><a href="#18_Retry_396" rel="nofollow">18. Retry（请求重试）</a></li> <li><a href="#18_SecureHeadersHeaders_406" rel="nofollow">18. SecureHeaders（安全Headers信息）</a></li> <li><a href="#19_SetPathPath_412" rel="nofollow">19. SetPath（设置Path）</a></li> <li><a href="#20_SetRequestHeaderRequestHeaders_427" rel="nofollow">20. SetRequestHeader（设置RequestHeaders信息）</a></li> <li><a href="#21_SetResponseHeaderResponseHeader_434" rel="nofollow">21. SetResponseHeader（设置ResponseHeader信息）</a></li> <li><a href="#22_RewriteResponseHeaderResponseHeader_441" rel="nofollow">22. RewriteResponseHeader（重写ResponseHeader）</a></li> <li><a href="#23_RewriteResponseHeaderResponseHeader_448" rel="nofollow">23. RewriteResponseHeader（重写ResponseHeader）</a></li> <li><a href="#24_SetStatus_455" rel="nofollow">24. SetStatus（设置响应状态码）</a></li> <li><a href="#25_SaveSessionSession_461" rel="nofollow">25. SaveSession（保存Session）</a></li> <li><a href="#26_StripPrefix_467" rel="nofollow">26. StripPrefix（删除路径前缀）</a></li> <li><a href="#27_SetRequestSize_474" rel="nofollow">27. SetRequestSize（设置请求最大长度）</a></li> <li><a href="#28_RequestHeaderSize_481" rel="nofollow">28. RequestHeaderSize（请求头最大长度）</a></li> <li><a href="#29_RequestHeaderSize_488" rel="nofollow">29. RequestHeaderSize（请求头最大长度）</a></li> </ul> </li> </ul> </div> <hr/> </h1> <p>网关提供API全托管，丰富的API管理功能。包含协议适配、协议转发、安全策略（WAF）、限量、灰度发布等功能。</p> <p>Spring Cloud Gateway：是基于Spring 5.0 开发的、Spring Boot 2.0 和 Project Reactor等技术开发的网关。</p> <h2><a id="Route_11" rel="nofollow"></a>路由（Route）</h2> <p>路由是网关最基础的部分，路由信息由一个ID，一个目标URL、系列断言工厂和系列Filter组成。如果路由断言为真，则说明请求的URL和配置的路由匹配。</p> <h2><a id="Predicate_13" rel="nofollow"></a>断言（Predicate）</h2> <p>Java8中的断言函数。Spring Cloud Gateway中的断言函数输入类型是Spring 5.0 框架中的ServerWebExchange。 Spring Cloud Gateway中的断言函数允许开发者定义匹配来自于Http请求中的任何信息。</p> <h2><a id="Filter_15" rel="nofollow"></a>过滤器（Filter）</h2> <p>过滤器分为两种：一种Gateway Filter（一般在每个路由中配置）和 Global Filter（作用于全部路由），过滤器将会对请求和响应进行修改。</p> <blockquote> <p>工作原理图<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220902/432f7dad8c381f815a3710a3e6f94c6d.jpg" alt="Spring Cloud Gateway概念与配置"></p> </blockquote> </h1> <h2><a id="POM_22" rel="nofollow"></a>引入POM</h2> <pre><code class="prism language-java"><span class="token generics"><span class="token punctuation">&lt;</span>dependencies<span class="token punctuation">&gt;</span></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>网关服务<span class="token operator">--</span><span class="token operator">&gt;</span><span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">&gt;</span></span><span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">&gt;</span></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">&gt;</span><span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">&gt;</span></span>spring<span class="token operator">-</span>cloud<span class="token operator">-</span>starter<span class="token operator">-</span>gateway<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>服务注册中心 客户端<span class="token operator">--</span><span class="token operator">&gt;</span><span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">&gt;</span></span><span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">&gt;</span></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">&gt;</span><span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">&gt;</span></span>spring<span class="token operator">-</span>cloud<span class="token operator">-</span>starter<span class="token operator">-</span>netflix<span class="token operator">-</span>eureka<span class="token operator">-</span>client<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>dependencies<span class="token operator">&gt;</span></code></pre> <h2><a id="_38" rel="nofollow"></a>主程序代码</h2> <pre><code class="prism language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@EnableEurekaClient</span><span class="token keyword">public</span><span class="token keyword">class</span><span class="token class-name">GatewayApp</span><span class="token punctuation">{<!-- --></span><span class="token keyword">public</span><span class="token keyword">static</span><span class="token keyword">void</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">GatewayApp</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre> <h2><a id="_48" rel="nofollow"></a>代码创建路由</h2> <blockquote> <p>不管是配置还是代码创建都可以参考一下两个类：<br /> GatewayFilterSpec（过滤器）<br /> PredicateSpec（断言工厂）</p> </blockquote> <pre><code class="prism language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span><span class="token keyword">class</span><span class="token class-name">RouteConfig</span><span class="token punctuation">{<!-- --></span><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span><span class="token class-name">RouteLocator</span><span class="token function">customerRouteLocator</span><span class="token punctuation">(</span><span class="token class-name">RouteLocatorBuilder</span> builder<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">return</span> builder<span class="token punctuation">.</span><span class="token function">routes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">route</span><span class="token punctuation">(</span><span class="token string">"customer"</span><span class="token punctuation">,</span>                 r<span class="token operator">-&gt;</span> r<span class="token punctuation">.</span><span class="token function">path</span><span class="token punctuation">(</span><span class="token string">"/customer"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">after</span><span class="token punctuation">(</span><span class="token class-name">ZonedDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filters</span><span class="token punctuation">(</span> f<span class="token operator">-&gt;</span> f<span class="token punctuation">.</span><span class="token function">addRequestHeader</span><span class="token punctuation">(</span><span class="token string">"X-Token"</span><span class="token punctuation">,</span><span class="token string">"token"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">uri</span><span class="token punctuation">(</span><span class="token string">"http:127.0.0.1:8888/"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre> <h2><a id="_65" rel="nofollow"></a>配置路由</h2> <pre><code class="prism language-java"> eureka<span class="token operator">:</span>   client<span class="token operator">:</span>     serviceUrl<span class="token operator">:</span>       defaultZone<span class="token operator">:</span> http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token operator">:</span><span class="token number">9001</span><span class="token operator">/</span>eureka<span class="token operator">/</span> server<span class="token operator">:</span>   port<span class="token operator">:</span><span class="token number">9002</span> spring<span class="token operator">:</span>   application<span class="token operator">:</span>     name<span class="token operator">:</span> gateway   cloud<span class="token operator">:</span>     gateway<span class="token operator">:</span>       routes<span class="token operator">:</span><span class="token operator">-</span> id<span class="token operator">:</span> customer           uri<span class="token operator">:</span> lb<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>customer           #断言           predicates<span class="token operator">:</span>             #可以采用<span class="token operator">-</span><span class="token class-name">Path</span> 断言名称，<span class="token operator">=</span><span class="token operator">/</span>customer<span class="token comment">/**：断言需要的参数             - Path=/customer/**             #可以采用 - Path 断言名称，=/customer/**：断言需要多个参数用，分开             - Header=X-Request-Id, \d+             #可以采用 -name (断言名称) args中填写参数信息             - name: Cookie               args:                 name: X-Cookie                 regexp: \d+           #过滤器           filters:             - RequestSize=500000       #作用于所有Routes       default-filters:         - AddResponseHeader=X-Response-Default-Red, Default-Blue         - PrefixPath=/httpbin</span></code></pre> <h2><a id="_101" rel="nofollow"></a>全局过滤器</h2> <blockquote> <p>全局过滤器，作用于全局所有路由。</p> </blockquote> <pre><code class="prism language-java"><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span><span class="token class-name">GlobalFilter</span><span class="token function">customFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">return</span><span class="token keyword">new</span><span class="token class-name">CustomGlobalFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span><span class="token keyword">class</span><span class="token class-name">CustomGlobalFilter</span><span class="token keyword">implements</span><span class="token class-name">GlobalFilter</span><span class="token punctuation">,</span><span class="token class-name">Ordered</span><span class="token punctuation">{<!-- --></span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span><span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token class-name">ServerWebExchange</span> exchange<span class="token punctuation">,</span><span class="token class-name">GatewayFilterChain</span> chain<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>         log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"custom global filter"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> chain<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>exchange<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span><span class="token keyword">int</span><span class="token function">getOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">return</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre> </h1> <h2><a id="1_After_124" rel="nofollow"></a>1. After（时间之后）</h2> <blockquote> <p>说明：当前时间大于配置时间，才能匹配通过<br /> 配置：- After=2022-06-20T17:42:47.789-07:00[America/Denver]<br /> 实现类：AfterRoutePredicateFactory<br /> 代码创建 after(ZonedDateTime datetime)</p> </blockquote> <h2><a id="2_Before_129" rel="nofollow"></a>2. Before（时间之前）</h2> <blockquote> <p>说明：当前时间小于配置时间，才能匹配通过<br /> 配置：- Before =2022-012-20T17:42:47.789-07:00[America/Denver]<br /> 实现类：BeforeRoutePredicateFactory<br /> 代码创建 before(ZonedDateTime datetime)</p> </blockquote> <h2><a id="3_Between_135" rel="nofollow"></a>3. Between（时间之间）</h2> <blockquote> <p>说明：当前时间在配置时间区间中，才能匹配通过<br /> 配置：-Between =2022-01-20T17:42:47.789-07:00[America/Denver], 2035-01-21T17:42:47.789-07:00[America/Denver]<br /> 实现类：BetweenRoutePredicateFactory，参数类型：ZonedDateTime<br /> 代码创建 between(ZonedDateTime datetime1, ZonedDateTime datetime2)</p> </blockquote> <h2><a id="4_CookieCookie_141" rel="nofollow"></a>4. Cookie（Cookie中字段匹配）</h2> <blockquote> <p>说明：当Cookie中的key为（chocolate）的值（value）通过配置值的匹配<br /> 配置：- Cookie=chocolate, \s+<br /> 实现类：CookieRoutePredicateFactory<br /> 代码创建 cookie(String name, String regex)</p> </blockquote> <h2><a id="5_HeaderHeader_147" rel="nofollow"></a>5. Header（Header中字段匹配）</h2> <blockquote> <p>说明：当Header中的key为（X-Request-Id）的值通过配置值的匹配<br /> 配置：- Header=X-Request-Id, \d+<br /> 实现类：HeaderRoutePredicateFactory<br /> 代码创建 header(String header, String regex)或header(String header)</p> </blockquote> <h2><a id="6_HostHost_153" rel="nofollow"></a>6. Host（Host匹配）</h2> <blockquote> <p>说明：当Host的值通过配置值的匹配<br /> 配置：- Host=<strong>.somehost.org,</strong>.anotherhost.org<br /> 实现类：HostRoutePredicateFactory<br /> 代码创建 host(String… pattern)</p> </blockquote> <h2><a id="7_MethodMethod_159" rel="nofollow"></a>7. Method（Method请求方法匹配）</h2> <blockquote> <p>说明：当Method请求方法是配置值，通过匹配<br /> 配置：- Method=GET,POST<br /> 案例说明：当请求方法为GET或POST通过，其他不通过匹配。<br /> 实现类：MethodRoutePredicateFactory<br /> 代码创建 method(String… pattern)</p> </blockquote> <h2><a id="8_PathPath_166" rel="nofollow"></a>8. Path（Path请求路径匹配）</h2> <blockquote> <p>说明：当Path请求路径，是配置值时，通过匹配。<br /> 配置：- Path=/red/{segment},/blue/{segment}<br /> 案例说明：如：http:127.0.0.1:8100/red/test。请求通过，http:127.0.0.1:8100/black/test。匹配不通过<br /> 实现类：PathRoutePredicateFactory<br /> 代码创建 path(String… pattern)或path(boolean matchOptionalTrailingSeparator, String… patterns)</p> </blockquote> <h2><a id="9_QueryQuery_173" rel="nofollow"></a>9. Query（Query查询参数匹配）</h2> <blockquote> <p>说明：当请求中queryParams中参数匹配<br /> 配置：- Query=green<br /> 案例说明：不带值，只要查询参数中包含配置值即可，如果带值，则需要匹配值<br /> 实现类：QueryRoutePredicateFactory<br /> 代码创建 query(String param, String regex)或query(String param)</p> </blockquote> <h2><a id="10_RemoteAddrIP_180" rel="nofollow"></a>10. RemoteAddr（请求IP匹配）</h2> <blockquote> <p>说明：请求IP地址在网段之内或者相同的IP<br /> 配置：- RemoteAddr=192.168.1.1/24<br /> 案例说明：当前匹配IP地址范围192.168.1.1~192.168.255<br /> 实现类：RemoteAddrRoutePredicateFactory<br /> 代码创建 remoteAddr(RemoteAddressResolver resolver, String… addrs)或remoteAddr(String… addrs)</p> </blockquote> <h2><a id="11_Weight_187" rel="nofollow"></a>11. Weight（权重）</h2> <blockquote> <p>说明：用于相同组（group）中的路由，根据权重比进行转发<br /> 配置：- Weight=group1, 8<br /> 案例说明：当两个以上（含两个）Route配置的组相同，那么相同的请求会根据权重比转发。例如：实现恢复发布。<br /> 实现类：WeightRoutePredicateFactory<br /> 代码创建 weight(String group, int weight)</p> </blockquote> </h1> <h2><a id="1_AddRequestHeader_195" rel="nofollow"></a>1. AddRequestHeader（请求头添加参数）</h2> <blockquote> <p>说明：在请求头中添加参数以及值<br /> 配置：- AddRequestHeader=X-Request-red, blue<br /> 案例说明：在请求Headers中添加Key和Value<br /> 实现类：AddRequestHeaderGatewayFilterFactory<br /> 代码创建 addRequestHeader(String headerName, String headerValue)</p> </blockquote> <h2><a id="2_AddRequestParameterQuery_202" rel="nofollow"></a>2. AddRequestParameter（Query）</h2> <blockquote> <p>说明：在请求头中添加参数以及值<br /> 配置：- AddRequestParameter=red, blue<br /> 案例说明：如：原数据：http:127.0.0.1:8100/customer, 更改为http:127.0.0.1:8100/customer?red=blue<br /> 实现类：AddRequestParameterGatewayFilterFactory<br /> 代码创建 addRequestParameter(String param, String value)</p> </blockquote> <h2><a id="3_AddResponseHeader_209" rel="nofollow"></a>3. AddResponseHeader（响应头添加参数）</h2> <blockquote> <p>说明：在响应头中添加参数以及值<br /> 配置：- AddResponseHeader=X-Response-Red, Blue<br /> 案例说明：在响应Headers中添加Key和Value<br /> 实现类：AddResponseHeaderGatewayFilterFactory<br /> 代码创建 addResponseHeader(String headerName, String headerValue)</p> </blockquote> <h2><a id="4_DedupeResponseHeader_216" rel="nofollow"></a>4. DedupeResponseHeader（响应头重复数据消除）</h2> <blockquote> <p>说明：响应头中同一个Key，存在多个重复数据，消除重复数据。</p> </blockquote> <pre><code class="prism language-java">#消除<span class="token class-name">Access</span><span class="token operator">-</span><span class="token class-name">Control</span><span class="token operator">-</span><span class="token class-name">Allow</span><span class="token operator">-</span><span class="token class-name">Credentials</span>和<span class="token class-name">Access</span><span class="token operator">-</span><span class="token class-name">Control</span><span class="token operator">-</span><span class="token class-name">Allow</span><span class="token operator">-</span><span class="token class-name">Origin</span>中重复的数据。<span class="token operator">-</span><span class="token class-name">DedupeResponseHeader</span><span class="token operator">=</span><span class="token class-name">Access</span><span class="token operator">-</span><span class="token class-name">Control</span><span class="token operator">-</span><span class="token class-name">Allow</span><span class="token operator">-</span><span class="token class-name">Credentials</span><span class="token class-name">Access</span><span class="token operator">-</span><span class="token class-name">Control</span><span class="token operator">-</span><span class="token class-name">Allow</span><span class="token operator">-</span><span class="token class-name">Origin</span>  #示例：消除前<span class="token class-name">Access</span><span class="token operator">-</span><span class="token class-name">Control</span><span class="token operator">-</span><span class="token class-name">Allow</span><span class="token operator">-</span><span class="token class-name">Credentials</span>：ture<span class="token punctuation">,</span><span class="token boolean">false</span> #消除后<span class="token class-name">Access</span><span class="token operator">-</span><span class="token class-name">Control</span><span class="token operator">-</span><span class="token class-name">Allow</span><span class="token operator">-</span><span class="token class-name">Credentials</span>：ture</code></pre> <blockquote> <p>实现类：DedupeResponseHeaderGatewayFilterFactory<br /> 代码创建 dedupeResponseHeader(String headerName, String strategy)</p> </blockquote> <h2><a id="5_Hystrix_230" rel="nofollow"></a>5. Hystrix（熔断）</h2> <blockquote> <p>说明：熔断，是为了请求超时时，自动失败转到指定页面</p> </blockquote> <pre><code class="prism language-java">#fallbackcmd的名称为<span class="token class-name">Hystrix</span>中异常的名称 #forward：为<span class="token class-name">Hystrix</span>异常时候的回调地址<span class="token operator">-</span><span class="token class-name">Hystrix</span><span class="token operator">=</span>fallbackcmd<span class="token punctuation">,</span>forward<span class="token operator">:</span><span class="token operator">/</span>fallback hystrix   command     fallbackcmd       execution         isolation           thread             timeoutInMilliseconds<span class="token operator">:</span><span class="token number">500</span></code></pre> <blockquote> <p>案例说明：当前请求超过500毫秒之后，会自动触发fallback的调用。<br /> 实现类：HystrixGatewayFilterFactory<br /> 代码创建 hystrix(Consumer&lt;Config&gt; configConsumer</p> </blockquote> <h2><a id="6_RequestRateLimiter_248" rel="nofollow"></a>6. RequestRateLimiter（请求限速）</h2> <blockquote> <p>说明：熔断，是为了请求超时时，自动失败转到指定页面</p> </blockquote> <pre><code class="prism language-java">#fallbackcmd的名称为<span class="token class-name">Hystrix</span>中异常的名称 #forward：为<span class="token class-name">Hystrix</span>异常时候的回调地址<span class="token operator">-</span> name<span class="token operator">:</span><span class="token class-name">RequestRateLimiter</span>     args<span class="token operator">:</span>       # 使用<span class="token class-name">SpEL</span>按名称引用bean       key<span class="token operator">-</span>resolver<span class="token operator">:</span><span class="token string">"#{@hostAddressKeyResolver}"</span>       #详情参考<span class="token class-name">RedisRateLimiter</span>       #允许用户每秒处理多少请求， 默认值<span class="token number">1</span>       redis<span class="token operator">-</span>rate<span class="token operator">-</span>limiter<span class="token punctuation">.</span>replenishRate<span class="token operator">:</span><span class="token number">5</span>       #令牌捅的容量，允许在一秒内的完成的最大请求数， 默认值<span class="token number">1</span>       redis<span class="token operator">-</span>rate<span class="token operator">-</span>limiter<span class="token punctuation">.</span>burstCapacity<span class="token operator">:</span><span class="token number">15</span>       redis<span class="token operator">-</span>rate<span class="token operator">-</span>limiter<span class="token punctuation">.</span>requestedTokens<span class="token operator">:</span><span class="token number">1</span></code></pre> <blockquote> <p>key-resolver的代码</p> </blockquote> <pre><code class="prism language-java"><span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">"hostAddressKeyResolver"</span><span class="token punctuation">)</span><span class="token keyword">public</span><span class="token class-name">KeyResolver</span><span class="token function">hostAddressKeyResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">return</span> exchange<span class="token operator">-&gt;</span><span class="token class-name">Mono</span><span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span>exchange<span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getRemoteAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getHostAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre> <blockquote> <p>案例说明：当前请求超过500毫秒之后，会自动触发fallback的调用。<br /> 实现类：RequestRateLimiterGatewayFilterFactory<br /> 代码创建 requestRateLimiter(Consumer&lt;org.springframework.cloud.gateway.filter.factory.RequestRateLimiterGatewayFilterFactory.Config&gt; configConsumer)</p> </blockquote> <h2><a id="7_RedirectTo_274" rel="nofollow"></a>7. RedirectTo（重定向）</h2> <blockquote> <p>说明：出现异常，重定向到指定URL。<code>状态码只能为3xx</code>。<br /> 配置：- RedirectTo=302, https://acme.org<br /> 案例说明：当请求返回状态码为302，重定向到指定URL。<br /> 实现类：RedirectToGatewayFilterFactory<br /> 代码创建 redirect(String status, String url)</p> </blockquote> <h2><a id="8_RewritePath_281" rel="nofollow"></a>8. RewritePath（重写路径）</h2> <blockquote> <p>说明：将请求路径更该为指定路径<br /> 配置：- RewritePath=/red/?(?&lt;segment&gt;.*), /${segment}<br /> 案例说明：将请求路径去除了/red<br /> 实现类：RedirectToGatewayFilterFactory<br /> 代码创建 rewritePath(String regex, String replacement)</p> </blockquote> <h2><a id="9_CircuitBreaker_289" rel="nofollow"></a>9. CircuitBreaker（断路器）</h2> <blockquote> <p>说明：断路器，当请求返回的状态码，在断路器状态码中，会将请求转发到指定URL</p> </blockquote> <pre><code class="prism language-java">#第一种：myCircuitBreaker 自定义异常<span class="token operator">-</span><span class="token class-name">CircuitBreaker</span><span class="token operator">=</span>myCircuitBreaker #第二种：配置，错误就转发<span class="token operator">-</span><span class="token class-name">CircuitBreaker</span><span class="token operator">=</span>myCircuitBreaker<span class="token punctuation">,</span>forward<span class="token operator">:</span><span class="token operator">/</span>fallback #第三种：其中fallbackUri执行反馈需要（试图）<span class="token class-name">View</span> #statusCodes： 配置了状态，除了发送在fallbackcmd的异常会调用fallbackUri， #              当返回状态为statusCodes中的状态也会调用fallbackUri<span class="token operator">-</span> name<span class="token operator">:</span><span class="token class-name">CircuitBreaker</span>   args<span class="token operator">:</span>     name<span class="token operator">:</span> fallbackcmd     fallbackUri<span class="token operator">:</span> forward<span class="token operator">:</span><span class="token operator">/</span>inCaseOfFailureUseThis     statusCodes<span class="token operator">:</span><span class="token operator">-</span><span class="token number">500</span> hystrix   command     fallbackcmd       execution         isolation           thread             timeoutInMilliseconds<span class="token operator">:</span><span class="token number">500</span></code></pre> <blockquote> <p>实现类：SpringCloudCircuitBreakerFilterFactory<br /> 代码创建 circuitBreaker(Consumer&lt;org.springframework.cloud.gateway.filter.factory.SpringCloudCircuitBreakerFilterFactory.Config&gt; configConsumer)</p> </blockquote> <h2><a id="10_FallbackHeaders_316" rel="nofollow"></a>10. FallbackHeaders（回调头添加信息）</h2> <blockquote> <p>说明：当断路器，返回异常。可以通过当前过滤器添加请求头信息<code>配置了CircuitBreaker或Hystrix才能起作用</code></p> </blockquote> <pre><code class="prism language-java">spring<span class="token operator">:</span>   cloud<span class="token operator">:</span>     gateway<span class="token operator">:</span>       routes<span class="token operator">:</span><span class="token operator">-</span> id<span class="token operator">:</span> ingredients         uri<span class="token operator">:</span> lb<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>ingredients         predicates<span class="token operator">:</span><span class="token operator">-</span><span class="token class-name">Path</span><span class="token operator">=</span><span class="token comment">//ingredients/**</span>         filters<span class="token operator">:</span>         #断路器<span class="token operator">-</span> name<span class="token operator">:</span><span class="token class-name">CircuitBreaker</span>           args<span class="token operator">:</span>             name<span class="token operator">:</span> fetchIngredients             fallbackUri<span class="token operator">:</span> forward<span class="token operator">:</span><span class="token operator">/</span>fallback<span class="token operator">-</span> id<span class="token operator">:</span> ingredients<span class="token operator">-</span>fallback         uri<span class="token operator">:</span> http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token operator">:</span><span class="token number">9994</span>         predicates<span class="token operator">:</span><span class="token operator">-</span><span class="token class-name">Path</span><span class="token operator">=</span><span class="token operator">/</span>fallback         filters<span class="token operator">:</span>         #<span class="token class-name">FallbackHeaders</span> 只有配置了<span class="token class-name">CircuitBreaker</span>或<span class="token class-name">Hystrix</span>才能起作用         #用来获取异常信息，添加到返回头中。<span class="token operator">-</span> name<span class="token operator">:</span><span class="token class-name">FallbackHeaders</span>           args<span class="token operator">:</span>             executionExceptionTypeHeaderName<span class="token operator">:</span><span class="token class-name">Test</span><span class="token operator">-</span><span class="token class-name">Header</span></code></pre> <blockquote> <p>实现类：FallbackHeadersGatewayFilterFactory<br /> 代码创建 fallbackHeaders(org.springframework.cloud.gateway.filter.factory.FallbackHeadersGatewayFilterFactory.Config config)或fallbackHeaders(Consumer&lt;org.springframework.cloud.gateway.filter.factory.FallbackHeadersGatewayFilterFactory.Config&gt; configConsumer)</p> </blockquote> <h2><a id="11_MapRequestHeader_348" rel="nofollow"></a>11. MapRequestHeader（请求头映射）</h2> <blockquote> <p>说明：如果请求头存在fromHeader，则将fromHeader值复制到toHeader<br /> 配置：- MapRequestHeader=Blue, X-Request-Red<br /> 实现类：MapRequestHeaderGatewayFilterFactory<br /> 代码创建 mapRequestHeader(String fromHeader, String toHeader)</p> </blockquote> <h2><a id="12_PrefixPath_354" rel="nofollow"></a>12. PrefixPath（路径前缀）</h2> <blockquote> <p>说明：路径添加上配置的值，如果存在则不添加。<br /> 配置：- PrefixPath=/mypath<br /> 实现类：PrefixPathGatewayFilterFactory<br /> 代码创建 prefixPath(String prefix)</p> </blockquote> <h2><a id="13_PreserveHostHeader_360" rel="nofollow"></a>13. PreserveHostHeader（保留主机标头）</h2> <blockquote> <p>说明：保留主机标头信息<br /> 配置：- PreserveHostHeader<br /> 实现类：PreserveHostHeaderGatewayFilterFactory<br /> 代码创建 preserveHostHeader()</p> </blockquote> <h2><a id="14_SetHostHeader_366" rel="nofollow"></a>14. SetHostHeader（设置主机头）</h2> <blockquote> <p>说明：设置Header中Host的信息<br /> 配置：- SetHostHeader=127.0.0.1<br /> 说明：修改Header中Host的值为127.0.0.1<br /> 实现类：SetRequestHostHeaderGatewayFilterFactory<br /> 代码创建 setHostHeader(String hostName)</p> </blockquote> <h2><a id="15_RemoveRequestHeaderRequestHeader_373" rel="nofollow"></a>15. RemoveRequestHeader（删除RequestHeader信息）</h2> <blockquote> <p>说明：根据Key删除RequestHeader中的信息<br /> 配置：- RemoveRequestHeader=X-Name<br /> 说明：过滤前：Request Headers X-Name:age<br /> 过滤后：Request Headers<br /> 实现类：RemoveRequestHeaderGatewayFilterFactory<br /> 代码创建 removeRequestHeader(String headerName)</p> </blockquote> <h2><a id="16_RemoveRequestParameter_381" rel="nofollow"></a>16. RemoveRequestParameter（删除请求参数）</h2> <blockquote> <p>说明：根据Key删除RequestParameter中的信息<br /> 配置：- RemoveRequestParameter=name<br /> 说明：过滤前：/test?name=张三&amp;age=18<br /> 过滤后：/test?age=18<br /> 实现类：RemoveRequestParameterGatewayFilterFactory<br /> 代码创建 removeRequestParameter(String paramName)</p> </blockquote> <h2><a id="17_RemoveResponseHeaderResponseHeader_389" rel="nofollow"></a>17. RemoveResponseHeader（删除ResponseHeader参数）</h2> <blockquote> <p>说明：根据Key删除ResponseHeader中的信息<br /> 配置：- removeResponseHeader=name<br /> 说明：过滤前：Response Headers X-Name:age<br /> 过滤后：Response Headers<br /> 实现类：RemoveResponseHeaderGatewayFilterFactory<br /> 代码创建 removeResponseHeader(String headerName)</p> </blockquote> <h2><a id="18_Retry_396" rel="nofollow"></a>18. Retry（请求重试）</h2> <blockquote> <p>说明：根据配置的重试次数以及对应的其他信息<br /> 配置：- Retry=3<br /> 说明：请求重试三次，则触发异常配置：<br /> this.series = RetryGatewayFilterFactory.toList(Series.SERVER_ERROR);<br /> this.statuses = new ArrayList();<br /> this.methods = RetryGatewayFilterFactory.toList(HttpMethod.GET);<br /> this.exceptions = RetryGatewayFilterFactory.toList(IOException.class, TimeoutException.class);<br /> 实现类：RetryGatewayFilterFactory<br /> 代码创建 retry(int retries)或retry(Consumer&lt;RetryConfig&gt; retryConsumer)</p> </blockquote> <h2><a id="18_SecureHeadersHeaders_406" rel="nofollow"></a>18. SecureHeaders（安全Headers信息）</h2> <blockquote> <p>说明：如果开启了对应的安全信息，则添加到Headers中。<br /> 配置：- SecureHeaders<br /> 实现类：SecureHeadersGatewayFilterFactory<br /> 代码创建 secureHeaders()或secureHeaders(Consumer&lt;org.springframework.cloud.gateway.filter.factory.SecureHeadersGatewayFilterFactory.Config&gt; configConsumer)</p> </blockquote> <h2><a id="19_SetPathPath_412" rel="nofollow"></a>19. SetPath（设置Path）</h2> <blockquote> <p>说明：重新设置请求Path</p> </blockquote> <pre><code class="prism language-java">#断言 predicates<span class="token operator">:</span>   #匹配地址为<span class="token operator">/</span>red<span class="token operator">/</span>xxx<span class="token punctuation">,</span><span class="token operator">-</span><span class="token class-name">Path</span><span class="token operator">=</span><span class="token operator">/</span>red<span class="token operator">/</span><span class="token punctuation">{<!-- --></span>segment<span class="token punctuation">}</span> filters<span class="token operator">:</span>   #过滤前如：<span class="token operator">/</span>red<span class="token operator">/</span>max<span class="token punctuation">,</span>过滤后：<span class="token operator">/</span>max<span class="token operator">-</span><span class="token class-name">SetPath</span><span class="token operator">=</span><span class="token operator">/</span><span class="token punctuation">{<!-- --></span>segment<span class="token punctuation">}</span></code></pre> <blockquote> <p>实现类：SetPathGatewayFilterFactory<br /> 代码创建 setPath(String template)</p> </blockquote> <h2><a id="20_SetRequestHeaderRequestHeaders_427" rel="nofollow"></a>20. SetRequestHeader（设置RequestHeaders信息）</h2> <blockquote> <p>说明：设置请求头的Key值为指定值<br /> 配置：- SetRequestHeader=X-Request-Red, Blue<br /> 说明：X-Request-Red:1234 修改为 X-Request-Red:Blue<br /> 实现类：SetRequestHeaderGatewayFilterFactory<br /> 代码创建 setRequestHeader(String headerName, String headerValue)</p> </blockquote> <h2><a id="21_SetResponseHeaderResponseHeader_434" rel="nofollow"></a>21. SetResponseHeader（设置ResponseHeader信息）</h2> <blockquote> <p>说明：设置响应头的Key值为指定值<br /> 配置：- SetResponseHeader=X-Request-Red, Blue<br /> 说明：X-Request-Red:1234 修改为 X-Request-Red:Blue<br /> 实现类：SetResponseHeaderGatewayFilterFactory<br /> 代码创建 setResponseHeader(String headerName, String headerValue)</p> </blockquote> <h2><a id="22_RewriteResponseHeaderResponseHeader_441" rel="nofollow"></a>22. RewriteResponseHeader（重写ResponseHeader）</h2> <blockquote> <p>说明：重写响应头中的信息,Key中的值，根据正则匹配，替换为指定参数<br /> 配置：-RewriteResponseHeader=X-Response-Red, , password=[^&amp;]+, password=***<br /> 说明：X-Request-Red:password=xxdw &amp;age=18修改为 X-Request-Red:password=***&amp;age=18<br /> 实现类：RewriteResponseHeaderGatewayFilterFactory<br /> 代码创建 rewriteResponseHeader(String headerName, String regex, String replacement)</p> </blockquote> <h2><a id="23_RewriteResponseHeaderResponseHeader_448" rel="nofollow"></a>23. RewriteResponseHeader（重写ResponseHeader）</h2> <blockquote> <p>说明：重写响应头中Location的值，修改为当路由的URI的值<br /> 配置：- RewriteLocationResponseHeader=AS_IN_REQUEST, Location, ,<br /> 说明：如：当前URI=127.0.0.1， 返回的Localhost为 10.0.0.1/test。修改为127.0.0.1<br /> 实现类：RewriteLocationResponseHeaderGatewayFilterFactory<br /> 代码创建 rewriteLocationResponseHeader(String stripVersionMode, String locationHeaderName, String hostValue, String protocolsRegex)</p> </blockquote> <h2><a id="24_SetStatus_455" rel="nofollow"></a>24. SetStatus（设置响应状态码）</h2> <blockquote> <p>说明：设置响应状态码<br /> 配置：- SetStatus=401<br /> 说明：当前响应的状态码为401<br /> 实现类：SetStatusGatewayFilterFactory<br /> 代码创建 setStatus(int status)或setStatus(HttpStatus status)或setStatus(String status)</p> </blockquote> <h2><a id="25_SaveSessionSession_461" rel="nofollow"></a>25. SaveSession（保存Session）</h2> <blockquote> <p>说明：保存Session会话信息<br /> 配置：- SaveSession<br /> 说明：保存会话信息，已方便后续请求。<br /> 实现类：SaveSessionGatewayFilterFactory<br /> 代码创建 saveSession()</p> </blockquote> <h2><a id="26_StripPrefix_467" rel="nofollow"></a>26. StripPrefix（删除路径前缀）</h2> <blockquote> <p>说明：删除路径前缀，以/为分割福。<br /> 配置：- StripPrefix=1<br /> 说明：/test/age/1 修改后 /age/1<br /> 实现类：StripPrefixGatewayFilterFactory<br /> 代码创建 stripPrefix(int parts)</p> </blockquote> <h2><a id="27_SetRequestSize_474" rel="nofollow"></a>27. SetRequestSize（设置请求最大长度）</h2> <blockquote> <p>说明：content-length中的大小要小于配置的值<br /> 配置：- SetRequestSize=5000000L<br /> 说明：默认大小5000000L<br /> 实现类：RequestSizeGatewayFilterFactory<br /> 代码创建 setRequestSize(Long size)或setRequestSize(DataSize size)</p> </blockquote> <h2><a id="28_RequestHeaderSize_481" rel="nofollow"></a>28. RequestHeaderSize（请求头最大长度）</h2> <blockquote> <p>说明：请求头中所有数据最大长度<br /> 配置：- RequestHeaderSize=1000B<br /> 说明：默认大小16000B<br /> 实现类：RequestHeaderSizeGatewayFilterFactory<br /> 代码创建 setRequestHeaderSize(DataSize size)</p> </blockquote> <h2><a id="29_RequestHeaderSize_488" rel="nofollow"></a>29. RequestHeaderSize（请求头最大长度）</h2> <blockquote> <p>说明：请求头中所有数据最大长度<br /> 配置：- RequestHeaderSize=1000B<br /> 说明：默认大小16000B<br /> 实现类：RequestHeaderSizeGatewayFilterFactory<br /> 代码创建 setRequestHeaderSize(DataSize size)</p> </blockquote> </div> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-33887.htm">女人养猫会怎么样呢（女人养猫咪会命不好吗）</a></p>
                                        <p>下一个：<a href="/news/article-34366.htm">动物疫苗公司招聘信息最新 动物疫苗公司招聘信息最新消息</a></p>
                                    </div>
                                </div>
                <div class="col-md-3">
                    <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/free-nodes/2024-11-8-free-subscribe-node.htm" title="「11月8日」最高速度22.7M/S，2024年V2ray/SSR/Clash/Shadowrocket每天更新免费节点订阅链接">「11月8日」最高速度22.7M/S，2024年V2ray/SSR/Clash/Shadowrocket每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/news/article-29874.htm" title="动物医院收费标准相关规定最新文件是什么（动物医院的号码是多少）">动物医院收费标准相关规定最新文件是什么（动物医院的号码是多少）</a></li>
                        <li class="py-2"><a href="/news/article-31973.htm" title="广州市猫咪领养中心电话（广州去哪领养猫）">广州市猫咪领养中心电话（广州去哪领养猫）</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-11-14-clash-node-daily-updates.htm" title="「11月14日」最高速度22.1M/S，2024年V2ray/Clash/SSR/Shadowrocket每天更新免费节点订阅链接">「11月14日」最高速度22.1M/S，2024年V2ray/Clash/SSR/Shadowrocket每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/news/article-26823.htm" title="如果我将提供NULL，将返回什么MySQL ASCII()函数？">如果我将提供NULL，将返回什么MySQL ASCII()函数？</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-10-1-linux-clash-github.htm" title="「10月1日」最高速度18.2M/S，2024年V2ray/Shadowrocket/Clash/SSR每天更新免费节点订阅链接">「10月1日」最高速度18.2M/S，2024年V2ray/Shadowrocket/Clash/SSR每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/news/article-32455.htm" title="成都兽用疫苗公司 成都兽用疫苗公司有哪些">成都兽用疫苗公司 成都兽用疫苗公司有哪些</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-11-11-clash-node-github.htm" title="「11月11日」最高速度22.2M/S，2024年Shadowrocket/Clash/SSR/V2ray每天更新免费节点订阅链接">「11月11日」最高速度22.2M/S，2024年Shadowrocket/Clash/SSR/V2ray每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-10-28-free-subscribe-node.htm" title="「10月28日」最高速度22.5M/S，2024年Clash/Shadowrocket/SSR/V2ray每天更新免费节点订阅链接">「10月28日」最高速度22.5M/S，2024年Clash/Shadowrocket/SSR/V2ray每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-12-7-windows-clash-node.htm" title="「12月7日」最高速度21.7M/S，2024年V2ray/Clash/Shadowrocket/SSR每天更新免费节点订阅链接">「12月7日」最高速度21.7M/S，2024年V2ray/Clash/Shadowrocket/SSR每天更新免费节点订阅链接</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">3</span> <a href="/date/2025-01/" title="2025-01 归档">2025-01</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">93</span> <a href="/date/2024-12/" title="2024-12 归档">2024-12</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">34</span> <a href="/date/2024-11/" title="2024-11 归档">2024-11</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">31</span> <a href="/date/2024-10/" title="2024-10 归档">2024-10</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">30</span> <a href="/date/2024-09/" title="2024-09 归档">2024-09</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">31</span> <a href="/date/2024-08/" title="2024-08 归档">2024-08</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">22</span> <a href="/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                    </ul>
    </div>
</div>

                </div>
            </div>
        </div>
    </section>
    <!-- ========================= about style-3 end ========================= -->
        <footer class="footer footer-style-1">
        <div class="container">
            <div class="copyright-wrapper wow fadeInUp" data-wow-delay=".2s">
                            <p>
                                <a href="/">首页</a> | 
                                <a href="/free-node/">免费节点</a> | 
                                <a href="/news/">新闻资讯</a> |
                                <a href="/about-us.htm">关于我们</a> |
                                <a href="/disclaimer.htm">免责申明</a> |
                                <a href="/privacy.htm">隐私申明</a> |
                                <a href="/sitemap.xml">网站地图</a>
                            </p>
                <p>MyClash官网每日更新站 版权所有 Powered by WordPress</p>
            </div>
        </div>
    </footer>
    <!-- ========================= footer style-1 end ========================= -->
    <!-- ========================= scroll-top start ========================= -->
    <a href="#" class="scroll-top"> <i class="lni lni-chevron-up"></i> </a>
    <!-- ========================= scroll-top end ========================= -->
    <!-- ========================= JS here ========================= -->
    <script src="/assets/website/js/frontend/myclash/jquery-3.4.1.min.js"></script>
    <script src="/assets/website/js/frontend/myclash/bootstrap.5.0.0.alpha-2-min.js"></script>
    <script src="/assets/website/js/frontend/myclash/contact-form.js"></script>
    <script src="/assets/website/js/frontend/myclash/tiny-slider.js"></script>
    <script src="/assets/website/js/frontend/myclash/glightbox.min.js"></script>
    <script src="/assets/website/js/frontend/myclash/imagesloaded.min.js"></script>
    <script src="/assets/website/js/frontend/myclash/isotope.min.js"></script>
    <script src="/assets/website/js/frontend/myclash/count-up.min.js"></script>
    <script src="/assets/website/js/frontend/myclash/wow.min.js"></script>
    <script src="/assets/website/js/frontend/myclash/main.js"></script>
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script><script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>