<!DOCTYPE html>
<html class="no-js" lang="zh-CN">

<head>
        <link rel="canonical" href="https://myclash.github.io/news/article-29587.htm" />
    <meta charset="utf-8" />
    <meta http-equiv="x-ua-compatible" content="ie=edge" />
    <title>SpringBoot整合Shiro和Redis的示例代码_java</title>
        <meta name="description" content="目录  1.准备工作 2.编写index,login,register三个JSP 3.实现User、Role、Permission三个POJO 4.实现Controller、Service、Dao 5" />
        <link rel="icon" href="/assets/website/img/myclash/favicon.ico" type="image/x-icon"/>
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <!-- Place favicon.ico in the root directory -->
    <!-- ========================= CSS here ========================= -->
    <link rel="stylesheet" href="/assets/website/css/myclash/bootstrap-5.0.0-alpha-2.min.css" />
    <link rel="stylesheet" href="/assets/website/css/myclash/LineIcons.2.0.css" />
    <link rel="stylesheet" href="/assets/website/css/myclash/animate.css" />
    <link rel="stylesheet" href="/assets/website/css/myclash/tiny-slider.css" />
    <link rel="stylesheet" href="/assets/website/css/myclash/glightbox.min.css" />
    <link rel="stylesheet" href="/assets/website/css/myclash/lindy-uikit.css" />
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-JV5DZ5QQPV"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-JV5DZ5QQPV');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
    <!--[if lte IE 9]>
      <p class="browserupgrade">
        You are using an <strong>outdated</strong> browser. Please
        <a href="https://browsehappy.com/">upgrade your browser</a> to improve
        your experience and security.
      </p>
    <![endif]-->
    <!-- ========================= preloader start ========================= -->
    <div class="preloader">
        <div class="loader">
            <div class="spinner">
                <div class="spinner-container">
                    <div class="spinner-rotator">
                        <div class="spinner-left">
                            <div class="spinner-circle"></div>
                        </div>
                        <div class="spinner-right">
                            <div class="spinner-circle"></div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <!-- ========================= preloader end ========================= -->
    <!-- ========================= hero-section-wrapper-2 start ========================= -->
    <section id="home" class="hero-section-wrapper-2 list">
                <!-- ========================= header-2 start ========================= -->
        <header class="header header-2">
            <div class="navbar-area">
                <div class="container">
                    <div class="row align-items-center">
                        <div class="col-lg-12">
                            <nav class="navbar navbar-expand-lg">
                                <a class="navbar-brand" href="/">
                                    My Clash
                                </a>
                                <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarSupportedContent2" aria-controls="navbarSupportedContent2" aria-expanded="false" aria-label="Toggle navigation">
                                    <span class="toggler-icon"></span>
                                    <span class="toggler-icon"></span>
                                    <span class="toggler-icon"></span>
                                </button>
                                <div class="collapse navbar-collapse sub-menu-bar" id="navbarSupportedContent2">
                                    <ul id="nav2" class="navbar-nav ml-auto">
                                                                                <li class="nav-item">
                                            <a href="/">首页</a>
                                        </li>
                                                                                <li class="nav-item">
                                            <a href="/free-nodes/">免费节点</a>
                                        </li>
                                                                                <li class="nav-item">
                                            <a href="/paid-subscribe/">推荐机场</a>
                                        </li>
                                                                                <li class="nav-item">
                                            <a href="/news/">新闻资讯</a>
                                        </li>
                                                                                <li class="nav-item">
                                            <a href="#">关于</a>
                                        </li>
                                        <li class="nav-item">
                                            <a href="#">联系</a>
                                        </li>
                                    </ul>
                                </div>
                                <!-- navbar collapse -->
                            </nav>
                            <!-- navbar -->
                        </div>
                    </div>
                    <!-- row -->
                </div>
                <!-- container -->
            </div>
            <!-- navbar area -->
        </header>
        <!-- ========================= header-2 end ========================= -->
        <!-- ========================= hero-2 start ========================= -->
        <div class="hero-section hero-style-2">
            <div class="container">
                <div class="row align-items-end">
                    <div class="col-lg-6">
                        <div class="hero-content-wrapper">
                            <h1 class="mb-30 wow fadeInUp" data-wow-delay=".4s">SpringBoot整合Shiro和Redis的示例代码_java</h1>
                            <p class="mb-50 wow fadeInUp" data-wow-delay=".6s">
                                <a href="/">首页</a> / <a href="/news/">新闻资讯</a> / <span>正文</span>
                            </p>
                        </div>
                    </div>
                    <div class="col-lg-6">
                        <div class="hero-image">
                            <img href="/assets/website/img/myclash/hero/hero-2/hero-img.svg" alt="" class="wow fadeInRight" data-wow-delay=".2s">
                            <img href="/assets/website/img/myclash/hero/hero-2/paattern.svg" alt="" class="shape shape-1">
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <!-- ========================= hero-2 end ========================= -->
    </section>
    <!-- ========================= hero-section-wrapper-2 end ========================= -->
    <!-- ========================= about style-3 start ========================= -->
    <section id="about" class="about-section about-style-3">
        <div class="container">
            <div class="row">
                <div class="col-md-9">
                                    <input type="hidden" id="share-website-info" data-name="" data-url="">
                  				  				  				<div id="navCategory"> <h5 class="catalogue">目录</h5> <ul class="first_class_ul"> <li><a href="#_label0" rel="nofollow">1.准备工作</a></li> <li><a href="#_label1" rel="nofollow">2.编写index,login,register三个JSP</a></li> <li><a href="#_label2" rel="nofollow">3.实现User、Role、Permission三个POJO</a></li> <li><a href="#_label3" rel="nofollow">4.实现Controller、Service、Dao</a></li> <li><a href="#_label4" rel="nofollow">5.实现SaltUtil和ApplicationContextUtil两个工具类</a></li> <li><a href="#_label5" rel="nofollow">6.实现核心Shiro</a></li> <li><a href="#_label6" rel="nofollow">7.实现Redis分布式缓存</a></li> </ul> </div> <p><a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://gitee.com/yuan-mengda/springboot-shiro-redis-demo"  target="_blank" rel="nofollow">demo源码</a></p> <p>此demo用SpringBoot+Shiro简单实现了登陆、注册、认证、授权的功能，并用redis做分布式缓存提高性能。</p> <p class="maodian"><a name="_label0" rel="nofollow"></a></p> <h2>1.准备工作</h2> <p>导入pom.xml</p> <div class="ay1code"> <pre class="brush:xml;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;  &lt;project xmlns="http://maven.apache.org/POM/4.0.0"           xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"           xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;      &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;        &lt;parent&gt;          &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;          &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;          &lt;version&gt;2.3.2.RELEASE&lt;/version&gt;      &lt;/parent&gt;      &lt;groupId&gt;com.ego&lt;/groupId&gt;      &lt;artifactId&gt;shirodemo&lt;/artifactId&gt;      &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;      &lt;properties&gt;          &lt;java.version&gt;1.8&lt;/java.version&gt;      &lt;/properties&gt;      &lt;dependencies&gt;          &lt;dependency&gt;              &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;              &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;          &lt;/dependency&gt;          &lt;dependency&gt;              &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;              &lt;artifactId&gt;lombok&lt;/artifactId&gt;          &lt;/dependency&gt;          &lt;dependency&gt;              &lt;groupId&gt;mysql&lt;/groupId&gt;              &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;          &lt;/dependency&gt;          &lt;dependency&gt;              &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;              &lt;artifactId&gt;spring-boot-starter-validation&lt;/artifactId&gt;          &lt;/dependency&gt;          &lt;dependency&gt;              &lt;groupId&gt;org.apache.httpcomponents&lt;/groupId&gt;              &lt;artifactId&gt;httpcore&lt;/artifactId&gt;              &lt;version&gt;4.4.13&lt;/version&gt;          &lt;/dependency&gt;            &lt;!-- 引入jsp依赖 --&gt;          &lt;dependency&gt;              &lt;groupId&gt;org.apache.tomcat.embed&lt;/groupId&gt;              &lt;artifactId&gt;tomcat-embed-jasper&lt;/artifactId&gt;          &lt;/dependency&gt;            &lt;dependency&gt;              &lt;groupId&gt;jstl&lt;/groupId&gt;              &lt;artifactId&gt;jstl&lt;/artifactId&gt;              &lt;version&gt;1.2&lt;/version&gt;          &lt;/dependency&gt;            &lt;!-- shiro --&gt;          &lt;dependency&gt;              &lt;groupId&gt;org.apache.shiro&lt;/groupId&gt;              &lt;artifactId&gt;shiro-spring-boot-starter&lt;/artifactId&gt;              &lt;version&gt;1.5.3&lt;/version&gt;          &lt;/dependency&gt;            &lt;!-- mybatis plus --&gt;          &lt;dependency&gt;              &lt;groupId&gt;com.baomidou&lt;/groupId&gt;              &lt;artifactId&gt;mybatis-plus-boot-starter&lt;/artifactId&gt;              &lt;version&gt;3.4.1&lt;/version&gt;          &lt;/dependency&gt;            &lt;!-- Druid数据源 --&gt;          &lt;dependency&gt;              &lt;groupId&gt;com.alibaba&lt;/groupId&gt;              &lt;artifactId&gt;druid-spring-boot-starter&lt;/artifactId&gt;              &lt;version&gt;1.1.10&lt;/version&gt;          &lt;/dependency&gt;            &lt;!-- Mysql --&gt;          &lt;dependency&gt;              &lt;groupId&gt;mysql&lt;/groupId&gt;              &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;              &lt;scope&gt;runtime&lt;/scope&gt;          &lt;/dependency&gt;          &lt;dependency&gt;              &lt;groupId&gt;io.springfox&lt;/groupId&gt;              &lt;artifactId&gt;springfox-swagger2&lt;/artifactId&gt;              &lt;version&gt;2.9.2&lt;/version&gt;          &lt;/dependency&gt;          &lt;dependency&gt;              &lt;groupId&gt;io.springfox&lt;/groupId&gt;              &lt;artifactId&gt;springfox-swagger-ui&lt;/artifactId&gt;              &lt;version&gt;2.9.2&lt;/version&gt;          &lt;/dependency&gt;          &lt;dependency&gt;              &lt;groupId&gt;log4j&lt;/groupId&gt;              &lt;artifactId&gt;log4j&lt;/artifactId&gt;              &lt;version&gt;1.2.17&lt;/version&gt;          &lt;/dependency&gt;          &lt;dependency&gt;              &lt;groupId&gt;org.apache.shiro&lt;/groupId&gt;              &lt;artifactId&gt;shiro-ehcache&lt;/artifactId&gt;              &lt;version&gt;1.5.3&lt;/version&gt;          &lt;/dependency&gt;          &lt;!-- 引入redis --&gt;          &lt;dependency&gt;              &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;              &lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;          &lt;/dependency&gt;        &lt;/dependencies&gt;    &lt;/project&gt;  </pre> </div> <p>配置yml文件</p> <div class="ay1code"> <pre class="brush:java;">spring:    # 设置视图模板为jsp    mvc:      view:        prefix: /        suffix: .jsp    datasource:      type: com.alibaba.druid.pool.DruidDataSource      druid:        driver-class-name: com.mysql.cj.jdbc.Driver        url: jdbc:mysql://localhost:3306/test?useUnicode=true&amp;characterEncoding=UTF-8&amp;allowMultiQueries=true&amp;serverTimezone=UTC        username: root        password: root        # 监控统计拦截的filters        filters: stat,wall,log4j,config        # 配置初始化大小/最小/最大        initial-size: 5        min-idle: 5        max-active: 20        # 获取连接等待超时时间        max-wait: 60000        # 间隔多久进行一次检测，检测需要关闭的空闲连接        time-between-eviction-runs-millis: 60000        # 一个连接在池中最小生存的时间        min-evictable-idle-time-millis: 300000        validation-query: SELECT 'x'        test-while-idle: true        test-on-borrow: false        test-on-return: false        # 打开PSCache，并指定每个连接上PSCache的大小。oracle设为true，mysql设为false。分库分表较多推荐设置为false        pool-prepared-statements: false        max-pool-prepared-statement-per-connection-size: 20    redis:      host: 127.0.0.1      port: 6379      password: abc123456      database: 0    mybatis-plus:    type-aliases-package: com.ego.pojo    configuration:      map-underscore-to-camel-case: true  </pre> </div> <p class="maodian"><a name="_label1" rel="nofollow"></a></p> <h2>2.编写index,login,register三个JSP</h2> <div class="ay1code"> <pre class="brush:plain;">&lt;%--解决页面乱码--%&gt;  &lt;%@page contentType="text/html; UTF-8" pageEncoding="UTF-8" isELIgnored="false" %&gt;  &lt;!doctype html&gt;  &lt;html lang="en"&gt;  &lt;head&gt;      &lt;meta charset="UTF-8"&gt;      &lt;meta name="viewport" content="width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0"&gt;      &lt;meta http-equiv="X-UA-Compatible" content="ie=edge"&gt;      &lt;title&gt;index&lt;/title&gt;  &lt;/head&gt;  &lt;body&gt;      &lt;form action="${pageContext.request.contextPath}/user/login" method="post"&gt;          用户名:&lt;input type="text" name="username" &gt; &lt;br/&gt;          密码  : &lt;input type="text" name="password"&gt; &lt;br&gt;          &lt;input type="submit" value="登录"&gt;      &lt;/form&gt;  &lt;/body&gt;  &lt;/html&gt;  &lt;%--解决页面乱码--%&gt;  &lt;%@page contentType="text/html; UTF-8" pageEncoding="UTF-8" isELIgnored="false" %&gt;  &lt;%@taglib prefix="shiro" uri="http://shiro.apache.org/tags" %&gt;  &lt;!doctype html&gt;  &lt;html lang="en"&gt;  &lt;head&gt;    &lt;meta charset="UTF-8"&gt;    &lt;meta name="viewport"          content="width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0"&gt;    &lt;meta http-equiv="X-UA-Compatible" content="ie=edge"&gt;    &lt;title&gt;index&lt;/title&gt;  &lt;/head&gt;  &lt;body&gt;  &lt;h1&gt;系统主页&lt;/h1&gt;  &lt;a href="${pageContext.request.contextPath}/user/logout"&gt;退出用户&lt;/a&gt;  &lt;ul&gt;    &lt;%-- admin角色的用户能同时拥有用户管理和订单管理的权限，user角色的用户只拥有订单管理的权限 --%&gt;    &lt;shiro:hasRole name="admin"&gt;      &lt;li&gt;        &lt;a href=""&gt;用户管理&lt;/a&gt;      &lt;/li&gt;    &lt;/shiro:hasRole&gt;    &lt;%-- admin角色的用户对订单有增删改查的权限，user角色的用户只能查看订单 --%&gt;    &lt;shiro:hasAnyRoles name="admin,user"&gt;      &lt;li&gt;        &lt;a href=""&gt;订单管理&lt;/a&gt;        &lt;ul&gt;          &lt;shiro:hasPermission name="order:add:*"&gt;            &lt;li&gt;&lt;a href=""&gt;新增&lt;/a&gt;&lt;/li&gt;          &lt;/shiro:hasPermission&gt;          &lt;shiro:hasPermission name="order:del:*"&gt;            &lt;li&gt;&lt;a href=""&gt;删除&lt;/a&gt;&lt;/li&gt;          &lt;/shiro:hasPermission&gt;          &lt;shiro:hasPermission name="order:upd:*"&gt;            &lt;li&gt;&lt;a href=""&gt;修改&lt;/a&gt;&lt;/li&gt;          &lt;/shiro:hasPermission&gt;          &lt;shiro:hasPermission name="order:find:*"&gt;            &lt;li&gt;&lt;a href=""&gt;查询&lt;/a&gt;&lt;/li&gt;          &lt;/shiro:hasPermission&gt;        &lt;/ul&gt;      &lt;/li&gt;    &lt;/shiro:hasAnyRoles&gt;  &lt;/ul&gt;  &lt;/body&gt;  &lt;/html&gt;  &lt;%--解决页面乱码--%&gt;  &lt;%@page contentType="text/html; UTF-8" pageEncoding="UTF-8" isELIgnored="false" %&gt;  &lt;!doctype html&gt;  &lt;html lang="en"&gt;  &lt;head&gt;      &lt;meta charset="UTF-8"&gt;      &lt;meta name="viewport"            content="width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0"&gt;      &lt;meta http-equiv="X-UA-Compatible" content="ie=edge"&gt;      &lt;title&gt;register&lt;/title&gt;  &lt;/head&gt;  &lt;body&gt;  &lt;h1&gt;用户注册&lt;/h1&gt;  &lt;form action="${pageContext.request.contextPath}/user/register" method="post"&gt;      用户名:&lt;input type="text" name="username" &gt; &lt;br/&gt;      密码  : &lt;input type="text" name="password"&gt; &lt;br&gt;      &lt;input type="submit" value="立即注册"&gt;  &lt;/form&gt;  &lt;/body&gt;  &lt;/html&gt;  </pre> </div> <p class="maodian"><a name="_label2" rel="nofollow"></a></p> <h2>3.实现User、Role、Permission三个POJO</h2> <div class="ay1code"> <pre class="brush:java;">package com.ego.pojo;  import com.baomidou.mybatisplus.annotation.*;  import io.swagger.annotations.ApiModel;  import io.swagger.annotations.ApiModelProperty;  import lombok.AllArgsConstructor;  import lombok.Data;  import lombok.NoArgsConstructor;  import java.io.Serializable;  import java.util.ArrayList;  import java.util.List;  /**   * @author 袁梦达 2019012364   */  @Data  @NoArgsConstructor  @AllArgsConstructor  @TableName("t_user")  @ApiModel("用户实体类")  public class User implements Serializable {      /** 数据库中设置该字段自增时该注解不能少 **/      @TableId(type = IdType.AUTO)      @ApiModelProperty(name = "id", value = "ID 主键")      private Integer id;      @TableField(fill = FieldFill.INSERT_UPDATE)      @ApiModelProperty(name = "username", value = "用户名")      private String username;      @TableField(fill = FieldFill.INSERT_UPDATE)      @ApiModelProperty(name = "password", value = "密码")      private String password;      @TableField(fill = FieldFill.INSERT)      @ApiModelProperty(name = "salt", value = "盐")      private String salt;      @TableField(fill = FieldFill.INSERT_UPDATE)      @ApiModelProperty(name = "age", value = "年龄")      private Integer age;      @TableField(fill = FieldFill.INSERT_UPDATE)      @ApiModelProperty(name = "email", value = "邮箱")      private String email;      @TableField(fill = FieldFill.INSERT_UPDATE)      @ApiModelProperty(name = "address", value = "地址")      private String address;      @TableField(exist = false)      private List&lt;Role&gt; roles = new ArrayList&lt;&gt;();  }  package com.ego.pojo;  import com.baomidou.mybatisplus.annotation.*;  import io.swagger.annotations.ApiModel;  import io.swagger.annotations.ApiModelProperty;  import lombok.AllArgsConstructor;  import lombok.Data;  import lombok.NoArgsConstructor;  import java.io.Serializable;  import java.util.ArrayList;  import java.util.List;  /**   * @author 袁梦达 2019012364   */  @Data  @NoArgsConstructor  @AllArgsConstructor  @TableName("t_role")  @ApiModel("角色实体类")  public class Role implements Serializable {      /** 数据库中设置该字段自增时该注解不能少 **/      @TableId(type = IdType.AUTO)      @ApiModelProperty(name = "id", value = "ID 主键")      private Integer id;      @TableField(fill = FieldFill.INSERT_UPDATE)      @ApiModelProperty(name = "name", value = "角色名称")      private String name;      @TableField(exist = false)      private List&lt;Permission&gt; permissions = new ArrayList&lt;&gt;();  }  package com.ego.pojo;  import com.baomidou.mybatisplus.annotation.*;  import io.swagger.annotations.ApiModel;  import io.swagger.annotations.ApiModelProperty;  import lombok.AllArgsConstructor;  import lombok.Data;  import lombok.NoArgsConstructor;  import java.io.Serializable;  /**   * @author 袁梦达 2019012364   */  @Data  @NoArgsConstructor  @AllArgsConstructor  @TableName("t_permission")  @ApiModel("权限实体类")  public class Permission implements Serializable {      /** 数据库中设置该字段自增时该注解不能少 **/      @TableId(type = IdType.AUTO)      @ApiModelProperty(name = "id", value = "ID主键")      private Integer id;      @TableField(fill = FieldFill.INSERT_UPDATE)      @ApiModelProperty(name = "name", value = "权限名称")      private String name;      @TableField(fill = FieldFill.INSERT_UPDATE)      @ApiModelProperty(name = "url", value = "权限菜单URL")      private String url;  }  </pre> </div> <p class="maodian"><a name="_label3" rel="nofollow"></a></p> <h2>4.实现Controller、Service、Dao</h2> <p>这里dao采用了mybatis-plus</p> <div class="ay1code"> <pre class="brush:java;">package com.ego.controller;  import com.ego.pojo.User;  import com.ego.service.UserService;  import org.apache.shiro.SecurityUtils;  import org.apache.shiro.authc.IncorrectCredentialsException;  import org.apache.shiro.authc.UnknownAccountException;  import org.apache.shiro.authc.UsernamePasswordToken;  import org.apache.shiro.subject.Subject;  import org.springframework.beans.factory.annotation.Autowired;  import org.springframework.stereotype.Controller;  import org.springframework.web.bind.annotation.RequestMapping;  /**   * @author 袁梦达 2019012364   */  @Controller  @RequestMapping("/user")  public class UserController {      @Autowired      private UserService userService;      /**       * 用户登录       * @param username       * @param password       * @return       */      @RequestMapping("/login")      public String login(String username,String password){          // 获取当前登录用户          Subject subject = SecurityUtils.getSubject();          try {              // 执行登录操作              subject.login(new UsernamePasswordToken(username,password));              // 认证通过后直接跳转到index.jsp              return "redirect:/index.jsp";          } catch (UnknownAccountException e) {              e.printStackTrace();              System.out.println("用户名错误！");          } catch (IncorrectCredentialsException e) {              System.out.println("密码错误！");          } catch (Exception e) {          }          // 如果认证失败仍然回到登录页面          return "redirect:/login.jsp";      }      @RequestMapping("/logout")      public String logout(){          subject.logout();          // 退出后仍然会到登录页面       * 用户注册       * @param user      @RequestMapping("/register")      public String register(User user){              userService.register(user);              return "redirect:/login.jsp";          return "redirect:/register.jsp";  }  package com.ego.service.impl;  import com.ego.dao.mapper.UserMapper;  import com.ego.shiro.ShiroConstant;  import com.ego.utils.SaltUtil;  import org.apache.shiro.crypto.hash.Md5Hash;  import org.springframework.stereotype.Service;  @Service("userService")  public class UserServiceImpl implements UserService {      private UserMapper userMapper;      @Override      public void register(User user) {          //生成随机盐          String salt = SaltUtil.getSalt(ShiroConstant.SALT_LENGTH);          //保存随机盐          user.setSalt(salt);          //生成密码          Md5Hash password = new Md5Hash(user.getPassword(), salt, ShiroConstant.HASH_ITERATORS);          //保存密码          user.setPassword(password.toHex());          userMapper.insert(user);      public User findUserByUserName(String userName) {          return userMapper.findUserByUserName(userName);  import com.ego.dao.mapper.RoleMapper;  import com.ego.pojo.Role;  import com.ego.service.RoleService;  import java.util.List;  @Service("roleService")  public class RoleServiceImpl implements RoleService {      private RoleMapper roleMapper;      public List&lt;Role&gt; getRolesByUserId(Integer userId) {          return roleMapper.getRolesByUserId(userId);  import com.ego.dao.mapper.PermissionMapper;  import com.ego.pojo.Permission;  import com.ego.service.PermissionService;  @Service("permissionService")  public class PermissionServiceImpl implements PermissionService {      private PermissionMapper permissionMapper;      public List&lt;Permission&gt; getPermissionsByRoleId(Integer roleId) {          return permissionMapper.getPermissionsByRoleId(roleId);  package com.ego.dao.mapper;  import com.baomidou.mybatisplus.core.mapper.BaseMapper;  import org.apache.ibatis.annotations.Mapper;  import org.apache.ibatis.annotations.Select;  @Mapper  public interface UserMapper extends BaseMapper&lt;User&gt; {      @Select("SELECT u.id,u.username,u.password,u.salt,u.age,u.email,u.address FROM t_user u WHERE u.username = #{username}")      User findUserByUserName(String username);  public interface RoleMapper extends BaseMapper&lt;Role&gt; {      @Select("select r.id,r.name from t_role r left join t_user_role ur on ur.role_id = r.id where ur.user_id = #{userId}")      List&lt;Role&gt; getRolesByUserId(Integer userId);  public interface PermissionMapper extends BaseMapper&lt;Permission&gt; {      @Select("select p.id,p.name,p.url from t_permission p left join t_role_permission rp on rp.permission_id = p.id where rp.role_id = #{roleId}")      List&lt;Permission&gt; getPermissionsByRoleId(Integer roleId);  </pre> </div> <p class="maodian"><a name="_label4" rel="nofollow"></a></p> <h2>5.实现SaltUtil和ApplicationContextUtil两个工具类</h2> <div class="ay1code"> <pre class="brush:java;">package com.ego.utils;  import java.util.Random;  /**   * @author 袁梦达 2019012364   */  public class SaltUtil {      public static String getSalt(int n){          char[] chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz01234567890!@#$%^&amp;*()".toCharArray();          StringBuilder sb = new StringBuilder();          for (int i = 0; i &lt; n; i++) {              char aChar = chars[new Random().nextInt(chars.length)];              sb.append(aChar);          }          return sb.toString();      }  }  import org.springframework.beans.BeansException;  import org.springframework.context.ApplicationContext;  import org.springframework.context.ApplicationContextAware;  import org.springframework.stereotype.Component;  @Component  public class ApplicationContextUtil implements ApplicationContextAware {      public static ApplicationContext context;      @Override      public void setApplicationContext(ApplicationContext applicationContext) throws BeansException {          this.context = applicationContext;      /**       * 根据工厂中的类名获取类实例       */      public static Object getBean(String beanName){          return context.getBean(beanName);  </pre> </div> <p class="maodian"><a name="_label5" rel="nofollow"></a></p> <h2>6.实现核心Shiro</h2> <div class="ay1code"> <pre class="brush:java;">package com.ego.utils;  import java.util.Random;  /**   * @author 袁梦达 2019012364   */  public class SaltUtil {      public static String getSalt(int n){          char[] chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz01234567890!@#$%^&amp;*()".toCharArray();          StringBuilder sb = new StringBuilder();          for (int i = 0; i &lt; n; i++) {              char aChar = chars[new Random().nextInt(chars.length)];              sb.append(aChar);          }          return sb.toString();      }  }  package com.ego.utils;  import org.springframework.beans.BeansException;  import org.springframework.context.ApplicationContext;  import org.springframework.context.ApplicationContextAware;  import org.springframework.stereotype.Component;  /**   * @author 袁梦达 2019012364   */  @Component  public class ApplicationContextUtil implements ApplicationContextAware {      public static ApplicationContext context;      @Override      public void setApplicationContext(ApplicationContext applicationContext) throws BeansException {          this.context = applicationContext;      }      /**       * 根据工厂中的类名获取类实例       */      public static Object getBean(String beanName){          return context.getBean(beanName);      }  }  </pre> </div> <p class="maodian"><a name="_label6" rel="nofollow"></a></p> <h2>7.实现Redis分布式缓存</h2> <div class="ay1code"> <pre class="brush:java;">package com.ego.shiro;  import com.ego.shiro.cache.RedisCacheManager;  import org.apache.shiro.authc.credential.HashedCredentialsMatcher;  import org.apache.shiro.realm.Realm;  import org.apache.shiro.spring.web.ShiroFilterFactoryBean;  import org.apache.shiro.web.mgt.DefaultWebSecurityManager;  import org.springframework.context.annotation.Bean;  import org.springframework.context.annotation.Configuration;  import java.util.HashMap;  import java.util.Map;  /**   * @author 袁梦达 2019012364   */  @Configuration  public class ShiroConfiguration {      //1.创建shiroFilter  //负责拦截所有请求      @Bean      public ShiroFilterFactoryBean getShiroFilterFactoryBean(DefaultWebSecurityManager defaultWebSecurityManager){          ShiroFilterFactoryBean shiroFilterFactoryBean = new ShiroFilterFactoryBean();          //给filter设置安全管理器          shiroFilterFactoryBean.setSecurityManager(defaultWebSecurityManager);          //配置系统受限资源          //配置系统公共资源          Map&lt;String,String&gt; map = new HashMap&lt;String,String&gt;();          map.put("/user/login", "anon");          map.put("/user/register","anon");          map.put("/register.jsp","anon");          map.put("/index.jsp","authc");//authc 请求这个资源需要认证和授权          //默认认证界面路径          shiroFilterFactoryBean.setLoginUrl("/login.jsp");          shiroFilterFactoryBean.setFilterChainDefinitionMap(map);          return shiroFilterFactoryBean;      }      //2.创建安全管理器      public DefaultWebSecurityManager getDefaultWebSecurityManager(Realm realm){          DefaultWebSecurityManager defaultWebSecurityManager = new DefaultWebSecurityManager();          //给安全管理器设置          defaultWebSecurityManager.setRealm(realm);          return defaultWebSecurityManager;      //3.创建自定义realm      public Realm getRealm(){          CustomerRealm customerRealm = new CustomerRealm();          // 设置密码匹配器          HashedCredentialsMatcher credentialsMatcher = new HashedCredentialsMatcher();          // 设置加密方式          credentialsMatcher.setHashAlgorithmName(ShiroConstant.HASH_ALGORITHM_NAME.MD5);          // 设置散列次数          credentialsMatcher.setHashIterations(ShiroConstant.HASH_ITERATORS);          customerRealm.setCredentialsMatcher(credentialsMatcher);          // 设置缓存管理器          customerRealm.setCacheManager(new RedisCacheManager());          // 开启全局缓存          customerRealm.setCachingEnabled(true);          // 开启认证缓存并指定缓存名称          customerRealm.setAuthenticationCachingEnabled(true);          customerRealm.setAuthenticationCacheName("authenticationCache");          // 开启授权缓存并指定缓存名称          customerRealm.setAuthorizationCachingEnabled(true);          customerRealm.setAuthorizationCacheName("authorizationCache");          return customerRealm;  }  public class ShiroConstant {      /** 随机盐的位数 **/      public static final int SALT_LENGTH = 8;      /** hash的散列次数 **/      public static final int HASH_ITERATORS = 1024;      public interface HASH_ALGORITHM_NAME {          String MD5 = "MD5";  import com.ego.pojo.Permission;  import com.ego.pojo.Role;  import com.ego.pojo.User;  import com.ego.service.PermissionService;  import com.ego.service.RoleService;  import com.ego.service.UserService;  import com.ego.utils.ApplicationContextUtil;  import org.apache.shiro.authc.AuthenticationException;  import org.apache.shiro.authc.AuthenticationInfo;  import org.apache.shiro.authc.AuthenticationToken;  import org.apache.shiro.authc.SimpleAuthenticationInfo;  import org.apache.shiro.authz.AuthorizationInfo;  import org.apache.shiro.authz.SimpleAuthorizationInfo;  import org.apache.shiro.realm.AuthorizingRealm;  import org.apache.shiro.subject.PrincipalCollection;  import org.springframework.util.CollectionUtils;  import org.springframework.util.ObjectUtils;  import java.util.List;  public class CustomerRealm extends AuthorizingRealm {      //授权      @Override      protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principals) {          // 获取主身份信息          String principal = (String) principals.getPrimaryPrincipal();          // 根据主身份信息获取角色信息          UserService userService = (UserService) ApplicationContextUtil.getBean("userService");          User user = userService.findUserByUserName(principal);          RoleService roleService = (RoleService) ApplicationContextUtil.getBean("roleService");          List&lt;Role&gt; roles = roleService.getRolesByUserId(user.getId());          if(!CollectionUtils.isEmpty(roles)){              SimpleAuthorizationInfo simpleAuthorizationInfo = new SimpleAuthorizationInfo();              roles.forEach(role -&gt; {                  simpleAuthorizationInfo.addRole(role.getName());                  PermissionService permissionService = (PermissionService) ApplicationContextUtil.getBean("permissionService");                  List&lt;Permission&gt; permissions = permissionService.getPermissionsByRoleId(role.getId());                  if(!CollectionUtils.isEmpty(permissions)){                      permissions.forEach(permission -&gt; {                          simpleAuthorizationInfo.addStringPermission(permission.getName());                      });                  }              });              return simpleAuthorizationInfo;          }          return null;      //认证      protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken token) throws AuthenticationException {          String principal = (String) token.getPrincipal();          if(!ObjectUtils.isEmpty(user)){              return new SimpleAuthenticationInfo(user.getUsername(),user.getPassword(), new CustomerByteSource(user.getSalt()),this.getName());  import org.apache.shiro.codec.Base64;  import org.apache.shiro.codec.CodecSupport;  import org.apache.shiro.codec.Hex;  import org.apache.shiro.util.ByteSource;  import java.io.File;  import java.io.InputStream;  import java.io.Serializable;  import java.util.Arrays;  //自定义salt实现  实现序列化接口  public class CustomerByteSource implements ByteSource, Serializable {      private byte[] bytes;      private String cachedHex;      private String cachedBase64;      public CustomerByteSource() {      public CustomerByteSource(byte[] bytes) {          this.bytes = bytes;      public CustomerByteSource(char[] chars) {          this.bytes = CodecSupport.toBytes(chars);      public CustomerByteSource(String string) {          this.bytes = CodecSupport.toBytes(string);      public CustomerByteSource(ByteSource source) {          this.bytes = source.getBytes();      public CustomerByteSource(File file) {          this.bytes = (new CustomerByteSource.BytesHelper()).getBytes(file);      public CustomerByteSource(InputStream stream) {          this.bytes = (new CustomerByteSource.BytesHelper()).getBytes(stream);      public static boolean isCompatible(Object o) {          return o instanceof byte[] || o instanceof char[] || o instanceof String || o instanceof ByteSource || o instanceof File || o instanceof InputStream;      public byte[] getBytes() {          return this.bytes;      public boolean isEmpty() {          return this.bytes == null || this.bytes.length == 0;      public String toHex() {          if (this.cachedHex == null) {              this.cachedHex = Hex.encodeToString(this.getBytes());          return this.cachedHex;      public String toBase64() {          if (this.cachedBase64 == null) {              this.cachedBase64 = Base64.encodeToString(this.getBytes());          return this.cachedBase64;      public String toString() {          return this.toBase64();      public int hashCode() {          return this.bytes != null &amp;&amp; this.bytes.length != 0 ? Arrays.hashCode(this.bytes) : 0;      public boolean equals(Object o) {          if (o == this) {              return true;          } else if (o instanceof ByteSource) {              ByteSource bs = (ByteSource) o;              return Arrays.equals(this.getBytes(), bs.getBytes());          } else {              return false;      private static final class BytesHelper extends CodecSupport {          private BytesHelper() {          public byte[] getBytes(File file) {              return this.toBytes(file);          public byte[] getBytes(InputStream stream) {              return this.toBytes(stream);  </pre> </div> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-29135.htm">38岁学美容晚不晚（34岁学美容一般学多久）</a></p>
                                        <p>下一个：<a href="/news/article-29588.htm">吉泰动物医院怎么样啊知乎（吉泰动物医院电话）</a></p>
                                    </div>
                                </div>
                <div class="col-md-3">
                    <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/free-nodes/2024-9-10-clash-node-daily-updates.htm" title="「9月10日」最高速度21.1M/S，2024年SSR/Clash/Shadowrocket/V2ray每天更新免费节点订阅链接">「9月10日」最高速度21.1M/S，2024年SSR/Clash/Shadowrocket/V2ray每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-10-6-clash-node.htm" title="「10月6日」最高速度21.4M/S，2024年SSR/Clash/V2ray/Shadowrocket每天更新免费节点订阅链接">「10月6日」最高速度21.4M/S，2024年SSR/Clash/V2ray/Shadowrocket每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-12-8-windows-clash-node.htm" title="「12月8日」最高速度18.1M/S，2024年V2ray/SSR/Clash/Shadowrocket每天更新免费节点订阅链接">「12月8日」最高速度18.1M/S，2024年V2ray/SSR/Clash/Shadowrocket每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-8-6-free-v2ray.htm" title="「8月6日」最高速度19.8M/S，2024年Shadowrocket/V2ray/SSR/Clash每天更新免费节点订阅链接">「8月6日」最高速度19.8M/S，2024年Shadowrocket/V2ray/SSR/Clash每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-8-10-clash-windows.htm" title="「8月10日」最高速度21.8M/S，2024年V2ray/Shadowrocket/Clash/SSR每天更新免费节点订阅链接">「8月10日」最高速度21.8M/S，2024年V2ray/Shadowrocket/Clash/SSR每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-10-29-windows-clash-node.htm" title="「10月29日」最高速度21.4M/S，2024年Shadowrocket/V2ray/SSR/Clash每天更新免费节点订阅链接">「10月29日」最高速度21.4M/S，2024年Shadowrocket/V2ray/SSR/Clash每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-7-15-clash-windows.htm" title="「7月15日」最高速度19.8M/S，2024年SSR/Shadowrocket/V2ray/Clash每天更新免费节点订阅链接">「7月15日」最高速度19.8M/S，2024年SSR/Shadowrocket/V2ray/Clash每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-11-30-shadowrocket-node.htm" title="「11月30日」最高速度18.7M/S，2024年V2ray/SSR/Shadowrocket/Clash每天更新免费节点订阅链接">「11月30日」最高速度18.7M/S，2024年V2ray/SSR/Shadowrocket/Clash每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-9-30-windows-clash-node.htm" title="「9月30日」最高速度22.2M/S，2024年Clash/Shadowrocket/SSR/V2ray每天更新免费节点订阅链接">「9月30日」最高速度22.2M/S，2024年Clash/Shadowrocket/SSR/V2ray每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-7-26-today-clash-node.htm" title="「7月26日」最高速度21.3M/S，2024年V2ray/SSR/Shadowrocket/Clash每天更新免费节点订阅链接">「7月26日」最高速度21.3M/S，2024年V2ray/SSR/Shadowrocket/Clash每天更新免费节点订阅链接</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">66</span> <a href="/date/2024-12/" title="2024-12 归档">2024-12</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">34</span> <a href="/date/2024-11/" title="2024-11 归档">2024-11</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">31</span> <a href="/date/2024-10/" title="2024-10 归档">2024-10</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">30</span> <a href="/date/2024-09/" title="2024-09 归档">2024-09</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">31</span> <a href="/date/2024-08/" title="2024-08 归档">2024-08</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">22</span> <a href="/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                    </ul>
    </div>
</div>

                </div>
            </div>
        </div>
    </section>
    <!-- ========================= about style-3 end ========================= -->
        <footer class="footer footer-style-1">
        <div class="container">
            <div class="copyright-wrapper wow fadeInUp" data-wow-delay=".2s">
                            <p>
                                <a href="/">首页</a> | 
                                <a href="/free-node/">免费节点</a> | 
                                <a href="/news/">新闻资讯</a> |
                                <a href="/about-us.htm">关于我们</a> |
                                <a href="/disclaimer.htm">免责申明</a> |
                                <a href="/privacy.htm">隐私申明</a> |
                                <a href="/sitemap.xml">网站地图</a>
                            </p>
                <p>MyClash官网每日更新站 版权所有 Powered by WordPress</p>
            </div>
        </div>
    </footer>
    <!-- ========================= footer style-1 end ========================= -->
    <!-- ========================= scroll-top start ========================= -->
    <a href="#" class="scroll-top"> <i class="lni lni-chevron-up"></i> </a>
    <!-- ========================= scroll-top end ========================= -->
    <!-- ========================= JS here ========================= -->
    <script src="/assets/website/js/frontend/myclash/jquery-3.4.1.min.js"></script>
    <script src="/assets/website/js/frontend/myclash/bootstrap.5.0.0.alpha-2-min.js"></script>
    <script src="/assets/website/js/frontend/myclash/contact-form.js"></script>
    <script src="/assets/website/js/frontend/myclash/tiny-slider.js"></script>
    <script src="/assets/website/js/frontend/myclash/glightbox.min.js"></script>
    <script src="/assets/website/js/frontend/myclash/imagesloaded.min.js"></script>
    <script src="/assets/website/js/frontend/myclash/isotope.min.js"></script>
    <script src="/assets/website/js/frontend/myclash/count-up.min.js"></script>
    <script src="/assets/website/js/frontend/myclash/wow.min.js"></script>
    <script src="/assets/website/js/frontend/myclash/main.js"></script>
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script><script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>